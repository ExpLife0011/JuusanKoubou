// exef2paz, v1.22 2009/09/21
// coded by asmodean

// contact: 
//   web:   http://asmodean.reverse.net
//   email: asmodean [at] hush.com
//   irc:   asmodean on efnet (irc.efnet.net)

// This tool extracts data from *.paz archives used by minori.

#include "as-util.h"
#include "blowfish.h" // common implementation
#include <algorithm>

#define CRYPTOPP_ENABLE_NAMESPACE_WEAK 1
#include "arc4.h"

struct key_info_t {
  string        prefix;
  unsigned char toc_key[32];
  unsigned char dat_key[32];
};

struct crud_info_t {
  string png;
  string ogg;
  string sc;
  string avi; 
};

struct game_info_t {
  key_info_t  keys[32];
  crud_info_t crud;
};

static const game_info_t GAME_INFO[] = { 
  // 0 = ef - the latter tale
  { { { "bg",      { 0xE6, 0xA7, 0xAE, 0x27, 0xE2, 0x1C, 0x26, 0xCF, 0x31, 0x3A, 0x60, 0x59, 0x6C, 0x1B, 0xBF, 0x5A, 0x43, 0xC9, 0x45, 0x21, 0x30, 0x13, 0xB5, 0xC2, 0x55, 0x73, 0xB2, 0xE6, 0x65, 0x0A, 0x3B, 0x75, },
                   { 0x63, 0x03, 0x1E, 0xAA, 0x20, 0x90, 0x87, 0xB2, 0xC1, 0xBA, 0x73, 0xB7, 0x3A, 0x98, 0xDE, 0xCE, 0x00, 0xD3, 0x85, 0xF6, 0xB9, 0xD4, 0x70, 0xE9, 0x65, 0xBC, 0xF5, 0x9F, 0x1F, 0x27, 0x68, 0xE1, } },
      { "bgm",     { 0x04, 0x59, 0x6D, 0xCA, 0x97, 0xCC, 0x9F, 0xBF, 0xF1, 0xF0, 0x78, 0x46, 0xEF, 0x62, 0xB0, 0xC2, 0x38, 0xA1, 0x6F, 0x77, 0x4C, 0x5E, 0x82, 0x99, 0xCD, 0x5B, 0xA3, 0xD1, 0x60, 0xF9, 0x09, 0x66, },
                   { 0x8D, 0x7C, 0x89, 0x81, 0xB3, 0x04, 0x66, 0x6B, 0x0A, 0xF6, 0x1A, 0x33, 0xB0, 0x66, 0x51, 0x71, 0xA2, 0x26, 0x73, 0xFE, 0xEE, 0xF6, 0x94, 0x49, 0xC0, 0x3B, 0xDD, 0x0B, 0xF9, 0xC0, 0xD8, 0xA8, } },
      { "mov",     { 0xC2, 0xEA, 0xFF, 0xAB, 0x99, 0xCE, 0xE2, 0x4B, 0x9A, 0xA5, 0xFD, 0xEE, 0x5A, 0xCA, 0x77, 0xCA, 0x6A, 0xF3, 0x71, 0x15, 0xD9, 0x14, 0x48, 0x37, 0xD3, 0x22, 0x43, 0xD1, 0xBB, 0x36, 0x72, 0x2F, }, 
                   { 0 }, },
      { "scr",     { 0xF9, 0x7F, 0xD5, 0xAD, 0x51, 0x5D, 0xD5, 0xC5, 0xD3, 0x58, 0xA6, 0x45, 0xA4, 0xB0, 0xB0, 0x75, 0x0D, 0x33, 0x3D, 0xDD, 0x7C, 0x0C, 0x61, 0x18, 0xDC, 0x05, 0x8C, 0x59, 0xBA, 0x27, 0xE5, 0xE5, },
                   { 0x2D, 0x20, 0xA3, 0xCD, 0x61, 0xB2, 0x39, 0x63, 0x35, 0x4C, 0xE8, 0x02, 0x43, 0x36, 0x83, 0xE5, 0xCA, 0xBB, 0x33, 0xB9, 0xCF, 0x1D, 0xD6, 0xD4, 0x0F, 0xFC, 0xA6, 0x1B, 0xD8, 0xF7, 0x55, 0x60, } },
      { "st",      { 0xF7, 0xAB, 0x69, 0x87, 0x2C, 0x19, 0xF3, 0x6D, 0xFE, 0x1F, 0x64, 0xB9, 0x69, 0x7F, 0x4B, 0xB0, 0x52, 0x66, 0xAA, 0x22, 0x04, 0x7D, 0x19, 0xB3, 0x03, 0x8F, 0x42, 0xEC, 0x03, 0xD9, 0x65, 0x1F, },
                   { 0x5E, 0x34, 0x2C, 0x08, 0x4A, 0x09, 0x37, 0xD1, 0x6F, 0xD8, 0x1F, 0xD3, 0x6F, 0x71, 0x8F, 0x39, 0x8B, 0xFF, 0xFC, 0xB9, 0x38, 0xDA, 0xD1, 0xC6, 0x19, 0x63, 0xFA, 0x26, 0xCE, 0xEA, 0x0A, 0xE2, } },
      { "sys",     { 0x21, 0x8C, 0x31, 0xBC, 0xC6, 0x2B, 0xAC, 0xF2, 0x47, 0xF7, 0xAE, 0x1C, 0xF1, 0x50, 0x78, 0x7D, 0xF6, 0xC0, 0xDA, 0xFA, 0xD2, 0x60, 0x9A, 0xAA, 0xAF, 0x37, 0xEA, 0xAC, 0x2F, 0x25, 0x1B, 0x3D, },
                   { 0x86, 0x79, 0x89, 0x7A, 0x71, 0x50, 0x5E, 0x3D, 0x62, 0x33, 0x7B, 0xEA, 0x5D, 0xFA, 0x0D, 0x2F, 0xA8, 0xDD, 0xA9, 0x4C, 0xCC, 0x70, 0x13, 0xBF, 0x10, 0xA1, 0xC0, 0x48, 0xC5, 0xF4, 0x7F, 0xE4, } },
      { "voice",   { 0x00, 0x6B, 0x02, 0x08, 0xBB, 0xBE, 0xF3, 0x35, 0x01, 0xC1, 0xAA, 0xFF, 0xE9, 0x2C, 0xDA, 0xCE, 0x2F, 0xD4, 0x90, 0x59, 0x02, 0xF3, 0x48, 0x3C, 0xB3, 0x5E, 0x9D, 0x69, 0x92, 0x13, 0x1E, 0xD9, },
                   { 0x83, 0x5F, 0xD5, 0x1E, 0xC4, 0xEB, 0xC3, 0xD3, 0xF0, 0x84, 0xDE, 0x5C, 0x8D, 0x97, 0xFB, 0xB6, 0x60, 0xE8, 0x60, 0xC4, 0x0B, 0x7D, 0x16, 0x7B, 0xDE, 0x52, 0x65, 0xC5, 0x9D, 0x11, 0x08, 0x51, }, },
      { "",        { 0 }, { 0 } }, },
    { "957277W1", "m24lX440", "A00U43Mj", "8fO1Xj6g" }, },

  // 1 = eden*
  { { { "bg",      { 0x38, 0xF8, 0x84, 0x76, 0x98, 0xDA, 0x5E, 0x9C, 0x4A, 0xCD, 0x77, 0xB4, 0x87, 0x9B, 0x88, 0xEE, 0x99, 0xAE, 0xED, 0xCC, 0xBE, 0x0A, 0x16, 0xEF, 0xFC, 0x79, 0x60, 0x3B, 0x69, 0x3E, 0xDE, 0xF8, },
                   { 0xF0, 0x89, 0xC8, 0xD6, 0xAB, 0x97, 0xA3, 0xFC, 0xB9, 0x25, 0xD6, 0xD2, 0x9F, 0x7B, 0x30, 0xD0, 0x91, 0x1C, 0xAF, 0x9F, 0x03, 0x49, 0x6D, 0xFA, 0xA6, 0x3F, 0x7B, 0x1F, 0xF2, 0xC0, 0x72, 0x77, } },
      { "bgm",     { 0x06, 0x75, 0x07, 0x00, 0x68, 0xC0, 0xF2, 0x9B, 0xFB, 0x9A, 0x0E, 0xD6, 0xA1, 0x94, 0x74, 0x23, 0xDF, 0x15, 0xD6, 0x58, 0x38, 0xFE, 0x57, 0x1F, 0x0F, 0xC6, 0x9F, 0x20, 0xCF, 0xC2, 0x43, 0x89, },
                   { 0xDD, 0xB8, 0xEA, 0x2E, 0x30, 0x9D, 0x12, 0x28, 0xDD, 0x76, 0x8E, 0x47, 0x06, 0xB8, 0x4D, 0x61, 0x7A, 0x09, 0xDF, 0x2C, 0xB6, 0x56, 0x09, 0x3F, 0x53, 0xB0, 0x11, 0xF5, 0x01, 0xFD, 0x4B, 0xA8, } },
      { "mov",     { 0x98, 0x89, 0xC2, 0x54, 0xF8, 0xF7, 0x9D, 0xBE, 0x3A, 0x57, 0x13, 0x6B, 0x7C, 0xB1, 0x91, 0x3F, 0x96, 0xF1, 0x39, 0xD1, 0xF0, 0x18, 0x82, 0xEC, 0x50, 0x2D, 0x0B, 0x5F, 0xE4, 0x5F, 0xB2, 0x85, }, 
                   { 0 }, },
      { "scr",     { 0x07, 0x96, 0x6B, 0xB6, 0xF5, 0x45, 0x10, 0x29, 0x34, 0x8F, 0x07, 0x90, 0x0C, 0x53, 0x7D, 0x8F, 0xFB, 0x39, 0x77, 0xE6, 0xBE, 0x85, 0x25, 0xD2, 0xB9, 0xD9, 0x72, 0xB5, 0x54, 0xA7, 0x6E, 0x38, },
                   { 0x29, 0x5C, 0x0C, 0x5E, 0x37, 0x6E, 0x03, 0x16, 0x79, 0x24, 0x2F, 0x53, 0xEB, 0xC2, 0xA0, 0xBD, 0x54, 0x3A, 0x9D, 0x91, 0x35, 0x8A, 0xC0, 0xB7, 0x26, 0xEF, 0xBA, 0xDC, 0x23, 0x39, 0x7A, 0x7F, } },
      { "se",      { 0xA8, 0xD2, 0x0B, 0x2A, 0x12, 0xA1, 0x15, 0x51, 0xF4, 0x9E, 0x28, 0xFC, 0x81, 0x84, 0xC6, 0x91, 0x3F, 0x25, 0x47, 0x01, 0xFE, 0xFF, 0x6F, 0x60, 0x9E, 0x3E, 0x4A, 0x40, 0x00, 0x1E, 0xF2, 0xF5, },
                   { 0x05, 0x64, 0x21, 0xB5, 0x03, 0xC3, 0x1A, 0x0F, 0x13, 0xFC, 0xCF, 0xB4, 0x5D, 0xE1, 0x86, 0x29, 0x8D, 0x0B, 0xC7, 0xB3, 0xF6, 0xA2, 0xD4, 0xBE, 0x6D, 0x81, 0xEA, 0xB2, 0x1C, 0xD4, 0x85, 0x1B, } },
      { "sys",     { 0x09, 0xFB, 0x84, 0x25, 0x8F, 0xE8, 0x1A, 0x9B, 0x25, 0xDB, 0xED, 0xA0, 0xC0, 0x22, 0x75, 0x24, 0x1C, 0xAA, 0xAB, 0xFF, 0x3F, 0xF1, 0xCA, 0xB8, 0x0B, 0x98, 0x11, 0xF2, 0xAD, 0xE9, 0xC7, 0xDF, },
                   { 0x35, 0x1A, 0x6B, 0x31, 0xBA, 0xA2, 0x94, 0xAA, 0xF2, 0x5D, 0x19, 0xD1, 0xEA, 0x22, 0x1C, 0x73, 0x57, 0xCB, 0xD4, 0x4F, 0x77, 0x8E, 0x85, 0x36, 0x73, 0x49, 0xB6, 0x60, 0x64, 0x13, 0xB2, 0x77, } },
      { "voice",   { 0xF6, 0x03, 0x94, 0x02, 0x92, 0x35, 0xE0, 0x43, 0x04, 0xBE, 0x0E, 0xA6, 0xD4, 0x69, 0xA6, 0x35, 0x61, 0xDE, 0x0E, 0x72, 0x30, 0x00, 0xC4, 0x1C, 0x17, 0x70, 0xF7, 0x2A, 0x5D, 0x23, 0x32, 0x76, },
                   { 0xDD, 0x35, 0x1A, 0x6C, 0xBA, 0x97, 0x64, 0x9D, 0x1E, 0x47, 0xEE, 0x44, 0x89, 0x73, 0x39, 0x16, 0x97, 0xBF, 0x07, 0x7E, 0x86, 0xA3, 0x3E, 0xC3, 0xD3, 0x26, 0x6C, 0xC0, 0xFA, 0x75, 0x38, 0x68, } },
      { "pmbg",    { 0x38, 0x0D, 0x61, 0x9A, 0x1A, 0x22, 0x8B, 0x7A, 0x75, 0xA5, 0xBC, 0x13, 0xF3, 0xE9, 0xA1, 0x9E, 0xEF, 0xB7, 0x44, 0x83, 0x99, 0xEA, 0x11, 0xDA, 0x14, 0xED, 0xAA, 0x71, 0x97, 0x5F, 0xF6, 0x86, },
                   { 0xF5, 0xD2, 0xAA, 0xF0, 0xE9, 0xD6, 0xD5, 0x50, 0x7D, 0x08, 0x26, 0x6D, 0x70, 0x90, 0xA4, 0x67, 0x7A, 0x19, 0x1E, 0x04, 0x39, 0x01, 0x2B, 0x7F, 0xE3, 0xE3, 0xFD, 0xBB, 0xDB, 0x99, 0x05, 0xD6, }, },
      { "pmbgm",   { 0x99, 0x24, 0x1A, 0xD9, 0x33, 0xAF, 0xB0, 0xD7, 0x79, 0x5A, 0xAB, 0xAA, 0x25, 0x78, 0x6F, 0xF9, 0x95, 0xD0, 0xE7, 0xE4, 0xC2, 0xA2, 0xFC, 0x62, 0xDC, 0x84, 0xC1, 0x26, 0x59, 0x00, 0x00, 0x20, }, 
                   { 0x7f, 0x73, 0xe1, 0x19, 0x50, 0x87, 0x36, 0x22, 0x89, 0xb0, 0xf8, 0x47, 0xb9, 0xfd, 0xb7, 0x9f, 0x65, 0x0e, 0xe5, 0x31, 0x1e, 0x00, 0x1d, 0x1b, 0xa8, 0xff, 0x1f, 0x47, 0x0f, 0x3f, 0x7d, 0x3e, }, },
      { "pmscr",   { 0x3A, 0x49, 0xB4, 0xFF, 0xD0, 0x4F, 0xE9, 0x68, 0xB0, 0xCC, 0xAF, 0xD2, 0x7D, 0x76, 0x20, 0x2A, 0xA6, 0x5C, 0xE9, 0x99, 0xE4, 0x7C, 0xE1, 0x99, 0xA7, 0x57, 0x5D, 0x6B, 0x6E, 0xED, 0xFD, 0x83, }, 
                   { 0xC8, 0x38, 0x0C, 0x87, 0x4A, 0xD5, 0x68, 0x97, 0x61, 0x67, 0x7A, 0xA1, 0xD9, 0x23, 0x0E, 0x90, 0x70, 0xE0, 0xD5, 0xEC, 0x61, 0xE2, 0x5D, 0x16, 0xE5, 0xE7, 0xF2, 0x9C, 0xB8, 0x88, 0xBB, 0xCD, }, },
      { "pmse",    { 0x43, 0x19, 0x35, 0xBE, 0xC0, 0x1A, 0xBA, 0x0D, 0xA6, 0x38, 0xCE, 0x97, 0x13, 0x70, 0xED, 0x92, 0x9D, 0xB3, 0x19, 0x8A, 0x37, 0x9A, 0xAD, 0x5A, 0xF3, 0x38, 0x0D, 0x50, 0x44, 0x50, 0x14, 0xFF, }, 
                   { 0x95, 0x3f, 0x55, 0x44, 0x8b, 0x2e, 0x7b, 0x10, 0x3f, 0x3d, 0xfa, 0x45, 0x6f, 0x94, 0x00, 0x07, 0xa7, 0x2d, 0xb8, 0x3e, 0xb2, 0xa2, 0xec, 0xd8, 0x38, 0x7a, 0xb9, 0x1a, 0xa4, 0x32, 0x35, 0x2a, }, },
      { "pmsys",   { 0xE1, 0x4E, 0x51, 0x51, 0xEA, 0x3C, 0xDE, 0x11, 0x74, 0xF6, 0x3A, 0x33, 0x5C, 0x81, 0x5D, 0x27, 0xCB, 0x99, 0x9C, 0xBF, 0xC6, 0xD9, 0x5C, 0xAB, 0xDC, 0x38, 0x9B, 0x4A, 0xF3, 0x40, 0xE7, 0x73, }, 
                   { 0xE4, 0x46, 0x83, 0x5B, 0xFB, 0x04, 0x10, 0x59, 0x6D, 0xF5, 0x76, 0x9A, 0xBF, 0xBC, 0x07, 0x68, 0xE8, 0xC1, 0x50, 0xEF, 0x2E, 0xF8, 0x79, 0x5C, 0x21, 0x13, 0x7F, 0xDC, 0x33, 0xE9, 0xE6, 0xBA, }, },
      { "pmvoice", { 0x28, 0x5D, 0x2A, 0x2F, 0xF7, 0x25, 0x4B, 0xDC, 0xAE, 0x0F, 0xC2, 0x2C, 0xE7, 0x3D, 0xC4, 0x4D, 0x58, 0x5C, 0xE0, 0x89, 0xE3, 0x81, 0x10, 0x3D, 0xC4, 0x03, 0xEB, 0x90, 0xD6, 0x53, 0x5D, 0x99, }, 
                   { 0x85, 0x97, 0x40, 0xf4, 0x95, 0x48, 0x04, 0x94, 0xca, 0x8f, 0xbb, 0x71, 0xa6, 0x5f, 0xd0, 0x78, 0xe0, 0x1a, 0xcc, 0x2a, 0x21, 0xea, 0x2f, 0xf6, 0xd3, 0xd8, 0x18, 0x7b, 0x2f, 0x63, 0x94, 0xf5, }, },
      { "",        { 0 }, { 0 } }, },
    { "p37j344s", "ol0lOrAf", "N426Fd94", "Uyiu4Ruy" }, },
};

unsigned long GAME_COUNT = sizeof(GAME_INFO) / sizeof(GAME_INFO[0]);

struct PAZHDR {
  unsigned char unknown[32];
  unsigned long toc_len;
};

struct PAZHDR2 {
  unsigned long entry_count;
};

struct PAZENTRY {
  unsigned long offset;
  unsigned long unknown1;
  unsigned long length;
  unsigned long original_length; // ??
  unsigned long padded_length;
  unsigned long unknown3;
};

void unobfuscate3(const string& filename, unsigned char* buff, unsigned long len) {
  char scramble[256] = { 0 };

  for (unsigned long i = 0; i < 256; i++) {
    scramble[i] = (unsigned char) i;
  }

  size_t        filename_len = filename.length();
  unsigned long index   = 0;

  for (unsigned long i = 0; i < 256; i++) {
    index = (unsigned char) (index + scramble[i] + filename[i % filename_len]);

    std::swap(scramble[i], scramble[index]);
  }

  unsigned long index1 = 0;
  unsigned long index2 = 0;

  for (unsigned long i = 0; i < len; i++) {
    index1 = (unsigned char) (index1 + 1);
    index2 = (unsigned char) (index2 + scramble[index1]);
    std::swap(scramble[index1], scramble[index2]);

    buff[i] ^= scramble[(unsigned char)(scramble[index1] + scramble[index2])];
  }
}

void read_unobfuscate(int fd, unsigned char key, void* buff, unsigned long len) {
  read(fd, buff, len);

  unsigned char* p   = (unsigned char*) buff;
  unsigned char* end = p + len;

  while (p < end) {
    *p++ ^= key;
  }
}

void decrypt_mov(unsigned char* seed,
                 const string&  seed2,
                 unsigned char* buff,
                 unsigned long  len)
{
  unsigned char rc4_key[256];

  for (unsigned long i = 0; i < 256; i++) {
    rc4_key[i] = seed[i] ^ seed2[i % seed2.length()];
  }

  unsigned long  key_len = 0x10000;
  unsigned char* key     = new unsigned char[key_len];
  CryptoPP::Weak::ARC4 rc4(rc4_key, sizeof(rc4_key));     
  rc4.GenerateBlock(key, key_len);

  for (unsigned long i = 0; i < len; i++) {
    buff[i] ^= key[i % key_len];
  }

  delete [] key;
}

int main(int argc, char** argv) {
  if (argc != 3) {
    fprintf(stderr, "exef2paz v1.22 by asmodean\n\n");
    fprintf(stderr, "usage: %s <input.paz> <game index>\n\n", argv[0]);
    fprintf(stderr, "\t 0 = ef - the latter tale\n", argv[0]);
    fprintf(stderr, "\t 1 = eden*\n", argv[0]);
    return -1;
  }

  string        in_filename(argv[1]);
  unsigned long game_index = atol(argv[2]);

  if (game_index >= GAME_COUNT) {
    fprintf(stderr, "Unknown game index: %d\n", game_index);
    return -1;
  }

  string prefix(as::stringtol(as::get_file_prefix(in_filename, true)));

  game_info_t game_info = GAME_INFO[game_index];
  key_info_t  keys;

  for (unsigned long i = 0; !game_info.keys[i].prefix.empty(); i++)
  {
    if (prefix == game_info.keys[i].prefix)
    {
      keys = game_info.keys[i];
    }
  }

  if (keys.prefix.empty()) {
    fprintf(stderr, "%s: don't know encryption key.\n", in_filename.c_str());
    return -1;
  }

  // Hard to recognize individual sound files because they lack extension
  bool is_audio = prefix == "bgm" || prefix == "se" || prefix == "voice" || prefix == "PMvoice";
  bool is_mov   = prefix == "mov";

  int fd = as::open_or_die(in_filename, O_RDONLY | O_BINARY);  

  PAZHDR hdr;
  read(fd, &hdr, sizeof(hdr));  

  char simple_key = hdr.toc_len >> 24;

  lseek(fd, 0, SEEK_SET);
  read_unobfuscate(fd, simple_key, &hdr, sizeof(hdr));  

  Blowfish bf;  

  unsigned char* toc_buff = new unsigned char[hdr.toc_len];
  read_unobfuscate(fd, simple_key, toc_buff, hdr.toc_len);
  bf.Set_Key(keys.toc_key, sizeof(keys.toc_key));
  bf.Decrypt(toc_buff, hdr.toc_len);  

  PAZHDR2*       hdr2 = (PAZHDR2*) toc_buff;
  unsigned char* p    = (unsigned char*) (hdr2 + 1);

  unsigned char* mov_seed = NULL;

  if (is_mov)
  {
    mov_seed = p;
    p += 256;
  }

  for (unsigned long i = 0; i < hdr2->entry_count; i++)
  {
    string filename = (char*) p;
    p += filename.length() + 1;

    PAZENTRY* entry = (PAZENTRY*) p;
    p += sizeof(*entry);    

    unsigned long  len  = entry->padded_length;
    unsigned char* buff = new unsigned char[len];
    lseek(fd, entry->offset, SEEK_SET);
    read_unobfuscate(fd, simple_key, buff, len);

    string crud;

    if (filename.find(".png") != string::npos)
    {
      crud = game_info.crud.png;
    }
    else if (filename.find(".ogg") != string::npos || is_audio)
    {
      crud = game_info.crud.ogg;
    }
    else if (filename.find(".sc") != string::npos)
    {
      crud = game_info.crud.sc;
    }
    else if (filename.find(".avi") != string::npos)
    {
      crud = game_info.crud.avi;
    }

    string seed = as::stringtol(filename) + as::stringf(" %08X ", entry->length) + crud;

    if (is_mov)
    {
      decrypt_mov(mov_seed, seed, buff, len);
    }
    else
    {
      bf.Set_Key(keys.dat_key, sizeof(keys.dat_key));
      bf.Decrypt(buff, len);

      if (!crud.empty()) {
        unobfuscate3(seed, buff, len);
      }
    }

    as::make_path(filename);
    as::write_file(filename, buff, entry->length);

    delete [] buff;
  }

  delete [] toc_buff;

  close(fd);

  return 0;
}
