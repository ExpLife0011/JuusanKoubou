#pragma comment(linker, "/ENTRY:main")
#pragma comment(linker, "/SECTION:.text,ERW /MERGE:.rdata=.text /MERGE:.data=.text")
#pragma comment(linker, "/SECTION:.Amano,ERW /MERGE:.text=.Amano")

#include "MyLibraryUser.h"
#include "MyLibraryUser.cpp"
#include "CompactPacker.h"
#include "cxdec.cpp"

ULONG EncryptKey[0x400] =
{
    0x0c92f8b6, 0xc58c25fd, 0xd51075da, 0x81ae0fd8, 0x4dff70a9, 0xb21fbf50, 0xfc4f54ad, 0x96617444, 0x2ddd7e94, 0x45661629, 0x442a33c0, 0x8656aa7a, 0xe7a91ad8, 0xf558cd86, 0x3a4fc320, 0x01c160b9,
    0xed27d2d3, 0x5a7f04e7, 0xd313beab, 0xbc4493de, 0x67ad6171, 0x2b1a0a05, 0x63aa61bb, 0x94a000a3, 0x9e783773, 0x78b3e9ef, 0x429ca51c, 0x6392ddce, 0xd6bfcaee, 0xf3a18409, 0xf9ccb7e0, 0xffb53364,
    0x422871c2, 0x3c593f2f, 0x21c3b38c, 0xf62962b6, 0xcf19e156, 0x3a433fa8, 0x88a5770c, 0x4fe1cbd2, 0xd4ffbca5, 0x6301afce, 0x48e81d8d, 0x7f30b300, 0xc9fd8314, 0x950a1bdc, 0xccfef683, 0xc0359a5f,
    0xaf787501, 0x55ec4430, 0x947e38e6, 0x9ec1a77e, 0xf462402a, 0x9e4a62c8, 0x56e183bd, 0x7157bbaa, 0x20a758d7, 0x158afe65, 0x9b5039e5, 0xe334c487, 0x579b35fd, 0x87c1ecd0, 0x172db6cf, 0x391446d1,
    0x63ab4e11, 0xfa29bfda, 0x48657753, 0x30410794, 0xdb36e42f, 0x33d691a0, 0xcb02b595, 0xb9530a79, 0x2151c7d8, 0xf10cf088, 0x2b1e559f, 0x7ca9bbac, 0xe399cf23, 0x360fcded, 0xeca09b63, 0xce5be4a2,
    0x115bf8db, 0x72968f5c, 0xe29d2027, 0x8d0663eb, 0xca9d1fcc, 0x5c1e5481, 0x39a0b57d, 0xcf86bbdf, 0x8550dd11, 0x1cf7a79d, 0x4a4e8140, 0xc6052aa0, 0x3e0593c8, 0xe9ab92ae, 0xd71adf47, 0x2ba37f03,
    0x6c6fbc2c, 0x83cae132, 0xf7a0ce22, 0xe08f0139, 0xeac64cd7, 0x08e6f674, 0xf1e0a826, 0xbd184732, 0xb867bdbc, 0x26800010, 0xe13bc99e, 0x92b62f0d, 0x1d481525, 0x5ba713cc, 0xb3a453fe, 0x85ec0342,
    0xbc00acea, 0x218928bd, 0xcf04feb8, 0x3fb51ac8, 0xa7c463cb, 0x6ab4db93, 0xa2807c2d, 0x55df5342, 0xb7ac1f8c, 0xe4be1e8f, 0xf338f081, 0xf7975177, 0xa7a7bfc8, 0xa7c531fb, 0x267a5df8, 0x4a38acc6,
    0xd1d2d431, 0x45ea8bab, 0xde171c45, 0x7dce18ff, 0x54ab4193, 0x2eebf7ad, 0x8077a099, 0xa00a1325, 0xbae1bf2d, 0xeb9be6ed, 0xcf705364, 0x477c6ea0, 0x22293e7e, 0x88397eba, 0xd4950473, 0x7dfe5737,
    0x1f72233d, 0xd5d8ce96, 0xe282995c, 0x2e79d00a, 0x0062a9b3, 0x90997e26, 0x6469d72d, 0xe268cb5d, 0x4bbf6057, 0xee4c1da9, 0x8fdb7edd, 0x5cd00837, 0xfa8e55b4, 0x0d317fe4, 0xaeba71fe, 0x968db983,
    0x68ecb3ae, 0x013b62cc, 0xa86e3037, 0xf419c89b, 0x527ac710, 0x4d1c64f7, 0x1b50fef1, 0x12f7ddbb, 0xfaadc725, 0x3f6ddaf4, 0xe42c2af1, 0xb8c5fdf6, 0x63c953b2, 0x631606dc, 0x997ea91c, 0x28a86ab1,
    0x99bfc182, 0x18050898, 0xb85d48ba, 0xff1fad89, 0x85f02eb5, 0x72991ac4, 0x210464c9, 0x1edf6406, 0xa94b09c8, 0x9ede6cb4, 0x92162d95, 0xcf5be17e, 0x87e188bb, 0xc034ee3d, 0x7ec39109, 0x558cf1f5,
    0xe8bb6a73, 0x7277a83a, 0x33bb392a, 0x5e90b2ac, 0x5bbb9299, 0x81d11230, 0x0b3eb957, 0x4f92fda0, 0x19118ef1, 0x045312d6, 0x4b8ad5c6, 0xa0cf80cd, 0x4140a2d3, 0x976a6dd4, 0xae860ee3, 0x7e02f41b,
    0xe06505ab, 0xb7a910f8, 0x3f823124, 0xad9001ea, 0x13160edb, 0x252e4f86, 0xcd905d5c, 0x424fc985, 0x112d4151, 0xca6ff0cd, 0xc9e19cca, 0x4dba37d0, 0x8651e159, 0x6b6c1d1c, 0x698ea1e4, 0xf40342c8,
    0x2d97f76c, 0x97077475, 0xe69e12af, 0xa519dd18, 0xf5b6a3d0, 0x12cb4309, 0xe2b4e485, 0x05a11fed, 0x48cafde6, 0x1cd695ab, 0x4a286fe6, 0x53d3e4a1, 0xb16b70b2, 0x31a12e78, 0x749530cb, 0x719d0304,
    0x5105d4aa, 0x445138ef, 0x49668d8b, 0xeff51f78, 0x3be3e98b, 0x45d18f80, 0xe0ca8ff1, 0xac968cb3, 0x29b2f3e9, 0xf8eec39c, 0x537668da, 0x585007c9, 0x98b071be, 0xd518e071, 0x05a66687, 0xf19bc984,
    0xb568d8e4, 0x6cfc61ff, 0x0d95a84d, 0xe708c917, 0xfbb78804, 0x5b9442e5, 0xd1bb3dfa, 0xb6b349f2, 0x9f6ecb8b, 0x6556461a, 0x3234c870, 0xde8779a4, 0x3b5a5179, 0xbfb48004, 0x5f718076, 0x6bce1398,
    0x8b2ced91, 0x782daa7a, 0xdff6085e, 0x77c131a9, 0x6557402e, 0xb3f6fdb6, 0x47942114, 0x506361f3, 0xa2795c48, 0x3e01c0ec, 0x917a304d, 0x564c4242, 0xb49c1146, 0x1b1f1f6b, 0x05614a18, 0x67aadfca,
    0xd5989513, 0xa69963d2, 0x5cd41ead, 0x9accb5d7, 0xde0ef9c2, 0x1446c645, 0xd561e499, 0x085c66e1, 0xbd1e698b, 0x3d85b5bb, 0x31759161, 0xd62abc1e, 0xde6468b7, 0xac10a965, 0xb8f4d91e, 0xc266add9,
    0x7dfc1905, 0xcc452bfc, 0x311a2646, 0xd71979fc, 0x7876a39c, 0xd1927219, 0xc6369764, 0xcaa412ca, 0x15e3a046, 0x3a180af6, 0xd7ffb346, 0x289d0eab, 0x9ba51b90, 0x88d2f8e9, 0xb224aa7b, 0x392ee3db,
    0x7f89100a, 0x6bd4afba, 0xb56c3012, 0x673e9645, 0x65a87e76, 0x33e2779f, 0xfde1207a, 0xea8c3b84, 0x8c46fb6e, 0xbf6e1eb6, 0x14dab412, 0x6de8dd10, 0xd88a219e, 0x112c7cc3, 0x96627d37, 0x82e6e653,
    0x1937245f, 0x97b3f2cf, 0x07fd7f62, 0x402d5848, 0xfe40e253, 0xfdf04912, 0x8866527e, 0xd6fbb5be, 0xfc4cd5d5, 0x2ce10073, 0x4ea5014e, 0x4c31a490, 0x8d8f81b9, 0x18a88476, 0xb22b9b79, 0x3fc9403e,
    0x5df81995, 0x881df6c3, 0x5a869140, 0x53efbd3d, 0xe34f4fb0, 0x1b8b5849, 0x27246b43, 0x88d6e258, 0x552ab7dd, 0xd9653d1c, 0x23b5349a, 0x51247b1a, 0xf31d272d, 0x69075116, 0xf601001f, 0x00579473,
    0xdb0456ad, 0xdf98495b, 0x8db07349, 0x2318e712, 0xd68148ad, 0x8942e92c, 0x890403d1, 0x2c022a2c, 0x70da6373, 0x8d4498da, 0xdaaa8768, 0xb7108717, 0x0f7b3f73, 0xc8661e80, 0x96732123, 0xad4d38ef,
    0x88e07a3c, 0x173cdc5c, 0xe973f41a, 0x9e16ef44, 0x14d585e0, 0xe1bebb59, 0x19217f76, 0x40590bd9, 0xebc0d70e, 0x038e0785, 0x69707682, 0x77c00349, 0x88fa25f3, 0x7623d49f, 0xfa7020b4, 0xfabf0a87,
    0x1c7c5513, 0x69bbaf11, 0x4c68cd88, 0x90f0dd61, 0x99ffb4d8, 0x5586f1d8, 0xae9100aa, 0xb171fe06, 0x19d3669f, 0x4cb89a02, 0xf8dbeb8e, 0x8b9ac201, 0xee480d55, 0x4c262126, 0x3fb1dbd9, 0x1665df83,
    0x9e07907f, 0xda6cf25e, 0x90489f64, 0xb986316e, 0x94095d01, 0x7cf1500b, 0xa3e78fe7, 0x52a7ae12, 0xd2eb14ab, 0xff142ab3, 0xfd6da09d, 0x7d3ff661, 0x52391879, 0x624e3e88, 0xf2699600, 0x36efe03a,
    0x89e23340, 0xf4906f1a, 0xa399c447, 0x528184ea, 0x567b5c66, 0x3307fd8b, 0xf753ef71, 0xd9f2b4f8, 0x00ec49eb, 0x54109aa9, 0x06add2a6, 0xac13ad8c, 0xa90ac38b, 0x492485fc, 0xdd136173, 0xf0718e12,
    0x0d1f31b4, 0x808223d7, 0x2720f6e8, 0x2e657a03, 0x96ca6c63, 0xedab46ed, 0xa74725a7, 0x6cd76828, 0xf60d617e, 0x86e57916, 0xc52b40d1, 0x22dcaa9c, 0x5c7fc72b, 0x54fd346e, 0xa87c78ca, 0x3f648317,
    0x483c5767, 0xe51be0b3, 0xea87368e, 0xd15ba609, 0x2a19d874, 0x580a97dc, 0xc905b0ef, 0xb11dced5, 0xca92d445, 0x73a86c9b, 0xe2973c49, 0xdbce3571, 0x246d2ff1, 0x4599de0f, 0xec11d109, 0x50575625,
    0x48c0cf49, 0x4cfb8099, 0x2f934ab2, 0xd0a0c77d, 0x3908fe52, 0x025c60bc, 0x1ef7458d, 0xc8e26055, 0x31456dbe, 0xe4620224, 0xd44c5f6c, 0x7f8571e8, 0x7a9160af, 0x6db572fc, 0xdb27f4a6, 0x38cd7305,
    0x587e7836, 0x893a94ec, 0x792fc9c8, 0x713c9c1b, 0x7d57b7bc, 0xa96fa7e7, 0x6967f58b, 0xa00b27a8, 0x1c5f65f1, 0x3bc92a68, 0xb4ff7286, 0xa3e28d95, 0x20c95a00, 0xe866c88f, 0x24643db4, 0x78d1586c,
    0xd8211f86, 0xb7767f52, 0x18c656cb, 0xa384dc65, 0x626cae0f, 0x5a429889, 0x1bb83d24, 0x7584f0ca, 0xe0afbadc, 0x4a677cd7, 0xc4959c7b, 0x8193bd07, 0xcdb610dc, 0xf3d6c9c4, 0x237625ef, 0xd88e0dcc,
    0x1229f2de, 0x778b22c3, 0xfc258b43, 0xddb0b439, 0x6f701e85, 0xfbb51c79, 0x1113fa07, 0x39841791, 0x6c070b8a, 0x48ba3237, 0xd8115b55, 0xa9178ad3, 0xb5f0e769, 0x02cc4f8a, 0x0f350e56, 0xaa2acc45,
    0x25d15d64, 0xbe060942, 0x1b038051, 0x2feedae4, 0x073ada38, 0x959492a8, 0x383d7ab7, 0x6cbc15f4, 0x744fc256, 0xe01e9308, 0x62c10648, 0x8ec5b9f6, 0x63f0d7ec, 0xb8b1298e, 0xa6b2651e, 0xf4584028,
    0xf02cae56, 0xfd8e7864, 0xfd099e07, 0xcceb2931, 0x3d5e758c, 0xac67df5f, 0x1fa96bed, 0x6610ae7f, 0xf1032d02, 0x84b124ab, 0x9617fd29, 0x0423e0c8, 0xb8a3c213, 0xde6a5a48, 0xf9b29e16, 0x7ac79e28,
    0x741a2c70, 0x8cb81106, 0x226f9f56, 0x6de4d084, 0x2b3cfe96, 0xfb258338, 0xbcc138f0, 0x415a2fcb, 0x2d1db94f, 0xb9a78953, 0x95d34a2b, 0xc46fc5ab, 0xf3019412, 0x339e3956, 0xc0cac90d, 0xdbfd0e46,
    0x7331e6eb, 0xc5dda744, 0x30c9c856, 0x9b055c97, 0x0c72275f, 0xa24410cb, 0x5f9e4ada, 0x236a0d8b, 0x730d298c, 0x75bb15db, 0x0e6749cf, 0xcef845ed, 0x9585a6de, 0x9bff401e, 0x79440b6e, 0x2f1529bd,
    0xae4253eb, 0xb14a9260, 0x57e70208, 0x82c4d29c, 0xd7965a01, 0xb2e9a98b, 0x0c4152ab, 0x0445ba3c, 0x9448022a, 0x6dba7823, 0x102171cd, 0xacdb5e89, 0x8fb2a336, 0xd44c9545, 0x495c1132, 0x55018af8,
    0x8e3ee1d3, 0x0770869f, 0x85e1cd99, 0xf78a47b6, 0xa7fb98cc, 0x9e868eec, 0x59c49be8, 0x256b6934, 0x2814af13, 0x38695d8c, 0xd222c51c, 0xdb53970e, 0xda440591, 0xd8034726, 0x4bf6f5b2, 0x5501ddd5,
    0x69a4b068, 0x45780f99, 0x3d7db897, 0xaeb3cb63, 0xd89568b6, 0x18a2ea14, 0x60399272, 0x578cb3bb, 0x40ca6fef, 0x5191d4a7, 0x455271c1, 0xfac109c8, 0x675bcbd4, 0x2347065a, 0x15e08387, 0x9e990913,
    0x6b54da19, 0x27ab007a, 0xeb906208, 0xb674698c, 0x2c5ec465, 0x82a90e61, 0xede4fc97, 0xdba3bd5d, 0xfd4e0fae, 0x14ad9bf5, 0x4177f988, 0x2fd690e0, 0xb8c46b6b, 0x2486daba, 0x9ad9517c, 0x89fb8980,
    0x99fa676a, 0x56d39e26, 0x2f7093ed, 0x84c161b9, 0x93e4d7d0, 0x2f0e73e2, 0x3590c64f, 0xb022077b, 0xfc10a63c, 0xc6dd9b23, 0xf91a30c3, 0x918294ab, 0xf9ba1e2a, 0xfd18c61f, 0x97b26b94, 0x81ecbdd1,
    0x6b606ac4, 0xad3046cb, 0x0e42a994, 0x199144d9, 0x29e50d24, 0xbfeab561, 0x39c82217, 0x75c1601f, 0xc946f6cb, 0xa260cd09, 0xeb70b73a, 0x7270ba32, 0x48cd79f6, 0xe4403fc5, 0xf3faac13, 0xbb2df29e,
    0x992f9d37, 0x2cc721ba, 0x5acac665, 0x880570f1, 0x7376e177, 0x0b6bdb8f, 0x6eb4c915, 0xa4e95e59, 0x6510f4b0, 0x399f766f, 0x6ed41ccc, 0xbff09d46, 0x7138d829, 0xca831beb, 0x1d400d95, 0xd78aae66,
    0x2376a5b5, 0x8c176828, 0x77fe0fb9, 0x89c32095, 0x72502442, 0xe523614e, 0x263ff77d, 0x70235436, 0x073cd646, 0x7bac1c6e, 0x985ceed1, 0xeb4e3b3a, 0x7ebbc532, 0x4ca5c85c, 0x62b9bbcb, 0x1ca3c984,
    0x0868f08e, 0xab042596, 0x24071bf5, 0x0a9ceae7, 0x7ca85ce0, 0xeda22f4f, 0x09e1de08, 0x96a44135, 0x2acb64e1, 0xc9631978, 0x0a6a33e3, 0xd412842b, 0xa50fa826, 0x6c0b4578, 0xa3122f04, 0x761ac8ce,
    0x0a80605d, 0x6a59149c, 0x97183463, 0x7628bc2a, 0x2e58bb89, 0xe648823a, 0xc1919779, 0xeeccca0d, 0x95f77e06, 0x5a515485, 0xac5c79b6, 0x63fe8ec3, 0x53a38f71, 0xd9b1d65b, 0x48aad6c8, 0x4e61bd9c,
    0xb45a16a0, 0x6b34b1d1, 0xcb6b6566, 0xbdfedc67, 0x758daab0, 0x3cbdcb8c, 0x5562730e, 0x2e7e5d9c, 0xb895e323, 0xd882207d, 0x90b0b233, 0x6f7090a6, 0x0894c0bb, 0xb8f88781, 0xba4b2d70, 0xbf9af667,
    0x618ec436, 0xad28d07f, 0xfafd1af3, 0x07a8e3b9, 0x353204cc, 0x7a75cbb2, 0xea496a7b, 0x4544838f, 0xeb81816b, 0x576b49de, 0xf4e132f6, 0xe9dfb019, 0x4f923f48, 0x04a38792, 0xdf11209f, 0x0ff75f47,
    0xfdb068eb, 0x76d56784, 0xff3a32e4, 0x023f25d0, 0xe1a735d6, 0xb1a4eec0, 0x123d1146, 0xb9ccff14, 0x66d0cf96, 0x9d4088e4, 0x7eea0bc9, 0x6015aa08, 0xd265c897, 0x019af3c7, 0x08bb38c0, 0xd1938681,
    0x535a61cb, 0x2973bd87, 0x3d91fe02, 0xdfaa6a06, 0x22b7cc1d, 0x51883366, 0x9588a32b, 0x39549bdb, 0x9528e046, 0x6f98e398, 0xe25fb8e4, 0x5ab7c5f5, 0x5951b363, 0xfe3f9a0f, 0xbfe32d13, 0x230dfe83,
    0x0079c4d4, 0x22b2bf96, 0x26c05680, 0x20132aac, 0x42cbeb3c, 0xf1447056, 0x1166b676, 0x0bc93c13, 0x513aa15e, 0x1b131da2, 0x1dc9108f, 0x8172da96, 0xa80e0f38, 0xa14ae4ed, 0x67873522, 0xae96556f,
    0xf6378d3e, 0xf946f569, 0x0b8ce08a, 0x5b1ed578, 0x58ad3e9b, 0x9a8db47e, 0x3689a040, 0x16bff7c1, 0x55c59ee3, 0x784849e4, 0x5ecee32a, 0xa80fb05d, 0xa249d1e4, 0x0b87e1d6, 0x866d7b8e, 0x1bb1218c,
    0xbd7d0d61, 0x26a7594e, 0x06c09b0d, 0x6d98cf79, 0xf7a315c7, 0x273d96b7, 0xf75faf48, 0x9b6befbc, 0xa32360e7, 0x8d5fa9a3, 0x06f216c4, 0x643c9fbc, 0x47cdcc26, 0xe71a5839, 0x02704600, 0x09ebfa75,
    0x1776b42d, 0xcd4af6ca, 0xffe584db, 0xbf766f05, 0x86d572eb, 0x288d474e, 0x79dc911a, 0x72711199, 0x65e17f5e, 0x6928ef54, 0x0ed5d569, 0x9574b78c, 0x481a27b1, 0x1a8f84c9, 0xf12131d1, 0xabf3dca9,
    0x65ecb809, 0x03a417c0, 0x4621d5c7, 0x91ec4c80, 0x896a8474, 0x8e75664c, 0x8cc11944, 0xc428ce19, 0xadc6e5ca, 0x725c59c3, 0x3add4225, 0xada36d8d, 0x2aef42d9, 0x70354ffb, 0x6bd4160f, 0x29cf7d03,
    0x455a3073, 0x3dfc704f, 0xd38724a1, 0x1289c3e2, 0xee4c934d, 0x79e00896, 0xd7095006, 0x08f4e948, 0x97971aad, 0xf7970043, 0x26407cbf, 0x377c19c2, 0xfa14660c, 0x5233c2a5, 0x7cb41f58, 0x020037e2,
    0x836cd1f1, 0xfa173255, 0x1eea5bc2, 0x6c816b7e, 0xd079eb22, 0x0087ece1, 0x76955aae, 0xc30a3c15, 0x85511082, 0x4b2bbd3a, 0x9d250402, 0x59b5b364, 0x21876886, 0x153fe558, 0x8daff735, 0x9b302285,
    0x7d543464, 0x4af12540, 0xce883af9, 0xe9f9266e, 0x65aca254, 0x19abd5f1, 0x726faa69, 0xe2831e85, 0xa03d8d9e, 0xae03cbc9, 0x39459e4a, 0xc29e5e68, 0x055275d4, 0x8cd903ce, 0xa610c215, 0x8e955630,
    0x00360114, 0xbb3c56c2, 0xed36f114, 0x76824135, 0x18483dfe, 0x7bbaca56, 0xec2124d7, 0xfcc0c2b2, 0x84746a80, 0x34045080, 0xaed9b33a, 0x83e669da, 0x3990f799, 0x55cadee0, 0x0421bb65, 0xc3f6339e,
    0xa3badc4a, 0x6e833dde, 0xcd6802d5, 0x02859759, 0xe4aeb30a, 0x94f0ad64, 0xd20de17d, 0x725f7db5, 0xf5ae89b8, 0x5a17e992, 0x203b3b5b, 0x57024ab3, 0x240d6f1d, 0x4e55eebb, 0xf8d9ce72, 0x78d49442,
    0x1eaed291, 0x006576e6, 0xebfe19b8, 0xa44a3810, 0x50e78514, 0x9b64a039, 0xd680eb7f, 0x796a81b7, 0x44003d9c, 0x9a7d633e, 0x2c4498f6, 0x0c09f16e, 0xa08c2c90, 0xa52a3d46, 0x0769d632, 0xd491676a,
    0xea8f37a2, 0x44ec12b5, 0x8877eba9, 0x2ada641c, 0x84ce6041, 0xfebe6638, 0x8098fdfd, 0x8d2ac08b, 0xa6d8803c, 0xaf2a13c8, 0x6963a093, 0xbde7953a, 0xdf5b6bc2, 0x21502c14, 0x7ce8162a, 0xab4fdcfc
};

class NitroPlusPack : public CompactPackerImpl<NitroPlusPack>
{
protected:
    Cxdec m_cxdec;

public:
    NitroPlusPack()
    {
        CXDEC_OPTION Option;

        ULONG Body1[6] = { 3, 2, 1, 4, 5, 0 };
        ULONG Body2[8] = { 7, 6, 5, 1, 0, 3, 4, 2 };
        ULONG Tail[3]  = { 1, 0, 2 };

        Option.DecryptBlock     = EncryptKey;
        Option.Body1IndexMap    = Body1;
        Option.Body2IndexMap    = Body2;
        Option.TailIndexMap     = Tail;
        Option.Const[0]         = TAG4('Rias');
        Option.Const[1]         = TAG4('Grmy');
        Option.FunctionCount    = 0x100;
        Option.FunctionSize     = 0x100;
        Option.LoopCount        = 6;

        m_cxdec.SetOption(&Option);
        m_cxdec.Initialize();
    }

    ~NitroPlusPack()
    {
        m_cxdec.Release();
    }

    ForceInline UNICODE_STRING GetDefaultExtension()
    {
        return WCharToUnicodeString(L".npack", CONST_STRLEN(L".npack"));
    }

    UPK_STATUS
    SetEntryContext(
        COMPACT_PACK_ENTRY *Entry,
        COMPACT_PACK_ENTRY *EntryBase,
        COMPACT_PACK_LIST  *FileList,
        COMPACT_PACK_LIST  *FileListBase,
        ULONG               Flags
    )
    {
        UNREFERENCED_PARAMETER(FileListBase);
        UNREFERENCED_PARAMETER(EntryBase);

        Entry->Flags            = Flags;
        Entry->CreationTime     = FileList->CreationTime;
        Entry->LastAccessTime   = FileList->LastAccessTime;
        Entry->LastWriteTime    = FileList->LastWriteTime;
        Entry->FileNameHash[0]  = FileList->AnsiHash[0] ^ FileList->AnsiHash[4];
        Entry->FileNameHash[1]  = FileList->AnsiHash[1] ^ FileList->AnsiHash[5];
        Entry->FileNameHash[2]  = FileList->AnsiHash[2] ^ FileList->AnsiHash[6];
        Entry->FileNameHash[3]  = FileList->AnsiHash[3] ^ FileList->AnsiHash[7];
        Entry->Attributes       = FileList->Attributes;

        return STATUS_SUCCESS;
    }

    UPK_STATUS
    SetEntryContext2(
        COMPACT_PACK_ENTRY *Entry,
        COMPACT_PACK_ENTRY *EntryBase,
        COMPACT_PACK_LIST  *FileList,
        COMPACT_PACK_LIST  *FileListBase,
        ULONG               Flags
    )
    {
        UNREFERENCED_PARAMETER(EntryBase);
        UNREFERENCED_PARAMETER(FileList);
        UNREFERENCED_PARAMETER(FileListBase);
        UNREFERENCED_PARAMETER(Flags);

        Entry->EntrySize = sizeof(*Entry) - sizeof(Entry->Buffer) - sizeof(Entry->FileName);
        Entry->EntrySize = ROUND_UP(Entry->EntrySize, 16);

        return STATUS_SUCCESS;
    }

    UPK_STATUS
    EncryptPackHeader(
        COMPACT_PACK_HEADER *Header
    )
    {
        ULONG Key[4] = { TAG4('Rias'), TAG4('Grem'), TAG3('ory'), Key[0] * Key[2] };

        m_cxdec.Encrypt2(0, Header, Header->HeaderSize, Key);

        return STATUS_SUCCESS;
    }

    UPK_STATUS
    CompressData(
        COMPACT_PACK_LIST   *FileInfo,
        COMPACT_PACK_BUFFER *SourceBuffer,
        COMPACT_PACK_BUFFER *DestinationBuffer
    )
    {
        UNREFERENCED_PARAMETER(FileInfo);

        return __super::NRV2ECompress(SourceBuffer, DestinationBuffer);
    }

    UPK_STATUS
    PostCompressData(
        COMPACT_PACK_LIST   *FileInfo,
        COMPACT_PACK_BUFFER *Buffer
    )
    {
        UNREFERENCED_PARAMETER(FileInfo);
        UNREFERENCED_PARAMETER(Buffer);

        m_cxdec.Encrypt2(
            0,
            Buffer->Buffer,
            Buffer->Size.LowPart,
            &FileInfo->AnsiHash[4]
        );

        return STATUS_SUCCESS;
    }

    UPK_STATUS
    CompressEntry(
        COMPACT_PACK_HEADER *Header,
        COMPACT_PACK_BUFFER *SourceBuffer,
        COMPACT_PACK_BUFFER *DestinationBuffer
    )
    {
        Header->Reserve = TAG4('Rias');
        return __super::NRV2ECompress(SourceBuffer, DestinationBuffer);
    }

    UPK_STATUS
    PostCompressEntry(
        COMPACT_PACK_HEADER *Header,
        COMPACT_PACK_BUFFER *SourceBuffer
    )
    {
        ULONG Key[4] =
        {
            _rotl(Header->Reserve, 11),
            _rotl(Key[0], 11),
            _rotl(Key[1], 11),
            _rotl(Key[2], 11),
        };

        SET_FLAG(Header->Flags, UNPACKER_ENTRY_ENCRYPTED);
        m_cxdec.Encrypt2(
            SourceBuffer->Offset.QuadPart,
            SourceBuffer->Buffer,
            Header->EntrySize.LowPart,
            Key
        );

        return STATUS_SUCCESS;
    }

    static
    LONG
    STDCALL
    EnumDirCallback(
        COMPACT_PACK_LIST   *Entry,
        PWIN32_FIND_DATAW   FindData,
        ULONG_PTR           Context
    )
    {
        CHAR    FileName[MAX_NTPATH];
        ULONG   Length;

        Length = StrLengthW(FindData->cFileName + Context);

        Entry->Attributes       = FindData->dwFileAttributes;
        Entry->CreationTime     = FileTimeToLargeInteger(FindData->ftCreationTime);
        Entry->LastAccessTime   = FileTimeToLargeInteger(FindData->ftLastAccessTime);
        Entry->LastWriteTime    = FileTimeToLargeInteger(FindData->ftLastWriteTime);
        Entry->Size.LowPart     = FindData->nFileSizeLow;
        Entry->Size.HighPart    = FindData->nFileSizeHigh;
        Entry->Flags            = 0;

        Length = WideCharToMultiByte(CP_SHIFTJIS, 0, FindData->cFileName + Context, Length, FileName, countof(FileName), NULL, NULL);
//        Nt_UnicodeToAnsi(FileName, countof(FileName), FindData->cFileName + Context, Length, &Length);
        StringLowerA(FileName, Length);
        sha256(FileName, Length, Entry->AnsiHash);

        CopyMemory(Entry->FileName, FindData->cFileName + Context, (Length + 1) * sizeof(WCHAR));
        StringLowerW(Entry->FileName, Length);
        sha256(Entry->FileName, Length * sizeof(WCHAR), Entry->UnicodeHash);

        CopyMemory(Entry->FileName, FindData->cFileName + Context, (Length + 1) * sizeof(WCHAR));

        return 1;
    }
};

class NitroPlusPack2 : public CompactPackerImpl<NitroPlusPack2>
{
public:
    UPK_STATUS
    SetEntryContext2(
        COMPACT_PACK_ENTRY *Entry,
        COMPACT_PACK_ENTRY *EntryBase,
        COMPACT_PACK_LIST  *FileList,
        COMPACT_PACK_LIST  *FileListBase,
        ULONG               Flags
    )
    {
        UNREFERENCED_PARAMETER(EntryBase);
        UNREFERENCED_PARAMETER(FileList);
        UNREFERENCED_PARAMETER(FileListBase);
        UNREFERENCED_PARAMETER(Flags);

        Entry->EntrySize = sizeof(*Entry) - sizeof(Entry->Buffer) - sizeof(Entry->FileName);
        Entry->EntrySize = ROUND_UP(Entry->EntrySize, 16);

        return STATUS_SUCCESS;
    }

};

ForceInline Void main2(Int argc, WChar **argv)
{
    if (--argc == 0)
        return;

    NitroPlusPack npp;

    do
    {
        npp.Auto(*++argv);

    } while (--argc);
}

int __cdecl main(int argc, wchar_t **argv)
{
    getargsW(&argc, &argv);
    main2(argc, argv);
    ReleaseArgv(argv);
    return Nt_ExitProcess(0);
}