from ml import *

'''

ulong magic;    // TAG4('DATA')
ulong;
ulong flags;    // 0x8000000
ulong filenum;

char filename[0x41];
ulong offset;
ulong size;

'''

INDEX_ENCRYPTED = 0x8000000

DecryptTable = \
[
    0x3c, 0x39, 0x41, 0x9a, 0x50, 0x79, 0x2a, 0x3f, 0xc4, 0x53, 0x74, 0x66, 0x84, 0xcb, 0x5f, 0x04,
    0x09, 0x1c, 0xe5, 0xed, 0x55, 0xb1, 0x18, 0x17, 0x1a, 0x54, 0xc1, 0x44, 0x6f, 0xcd, 0xc7, 0x5c,
    0x7c, 0x81, 0xfa, 0xe0, 0x2f, 0xab, 0x46, 0x10, 0x6a, 0x5e, 0x4c, 0x6e, 0x83, 0xbe, 0xea, 0x7b,
    0x6d, 0xd1, 0xe8, 0x6c, 0x26, 0x0b, 0xf1, 0x71, 0x73, 0xff, 0xe3, 0x90, 0xdb, 0x21, 0xe9, 0x0f,
    0xdf, 0xe7, 0xda, 0xbc, 0x64, 0x5d, 0x43, 0x24, 0xa5, 0x8a, 0x22, 0xba, 0x13, 0x16, 0xe4, 0x32,
    0xb3, 0x57, 0xe1, 0x0a, 0xee, 0x3a, 0x76, 0x33, 0xf5, 0x62, 0x7a, 0x03, 0x49, 0x96, 0x36, 0x8e,
    0xa1, 0xdc, 0xfc, 0xac, 0x0d, 0xc6, 0x1d, 0xde, 0x9b, 0xb8, 0x23, 0x19, 0x77, 0x98, 0xbd, 0x06,
    0x4f, 0xb0, 0x45, 0x42, 0x7e, 0xfd, 0x38, 0x0e, 0xbb, 0x2c, 0xa3, 0x72, 0xec, 0x67, 0x4e, 0x91,
    0x8d, 0xb6, 0x4d, 0xc0, 0x89, 0x27, 0xc9, 0x29, 0x05, 0xfb, 0x7f, 0xeb, 0xd9, 0xa6, 0xef, 0xae,
    0x2b, 0xfe, 0x01, 0x59, 0xb5, 0x02, 0x8b, 0x31, 0xd7, 0x37, 0xdd, 0xbf, 0x3d, 0x93, 0x80, 0xd5,
    0xb9, 0xaa, 0x75, 0x60, 0xa0, 0x85, 0xd0, 0xf3, 0x08, 0xb4, 0x1e, 0xf4, 0xd8, 0xf9, 0x6b, 0x47,
    0x34, 0xb2, 0xf6, 0x30, 0x3e, 0x20, 0x63, 0x78, 0xd6, 0x61, 0xcf, 0xa4, 0x70, 0x87, 0xf2, 0xc5,
    0x5a, 0xa2, 0x9e, 0x40, 0xce, 0x07, 0x69, 0x35, 0x5b, 0x97, 0x8c, 0x88, 0xa9, 0xad, 0x4a, 0x12,
    0x95, 0xaf, 0xa7, 0x4b, 0x51, 0x9c, 0x8f, 0xcc, 0x14, 0xd2, 0x7d, 0x1f, 0xc3, 0x86, 0x68, 0x1b,
    0x2d, 0x15, 0x58, 0x28, 0x00, 0xe2, 0x52, 0xc8, 0x2e, 0xca, 0xc2, 0x9d, 0x82, 0xd4, 0x94, 0x48,
    0xa8, 0x92, 0x11, 0xf0, 0xb7, 0x99, 0xf7, 0xf8, 0x56, 0x0c, 0x9f, 0x65, 0x25, 0x3b, 0xe6, 0xd3,
]

def byte(v):
    return v & 0xFF

def DecryptIndex(index):
    dl = 0x6F
    cl = 0xAD
    index = bytearray(index)
    al = byte(len(index) - 0x27)
    for i in range(len(index)):
        al = byte(al + cl)
        cl = byte(cl + al)
        dl = byte(dl + cl)
        dl ^= al
        index[i] ^= dl

    return index

def DecryptFile(buf):
    buf = bytearray(buf)
    for i in range(len(buf)):
        buf[i] = DecryptTable[buf[i]]

    return buf

class IndexEntry:
    def __init__(self, name, offset, size):
        self.name   = name
        self.offset = offset
        self.size   = size

def main():
    for data in sys.argv[1:]:
        fs = BytesStream()
        fs.open(data)

        if fs.read(4) != b'DATA':
            continue

        fs.seek(4, SEEK_CUR)

        flags = fs.ulong()
        count = fs.ulong()

        indexsize = count * 0x49

        index = fs.read(indexsize)

        if flags & INDEX_ENCRYPTED:
            index = DecryptIndex(index)

        dirname = os.path.splitext(data)[0] + '\\'

        index = BytesStream().openmem(index)
        for i in range(count):
            name = index.read(0x41).split(b'\x00', 1)[0].decode('936')
            offset = index.ulong()
            size = index.ulong()

            print('unpacking %s ... ' % name, end = '')

            os.makedirs(os.path.dirname(dirname + name), exist_ok = True)
            fs.seek(offset)
            buf = fs.read(size)
            buf = DecryptFile(buf)

            open(dirname + name, 'wb').write(buf)
            #input()

            print('ok')

TryInvoke(main)
input()
