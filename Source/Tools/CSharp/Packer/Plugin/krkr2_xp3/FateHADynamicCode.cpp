#include <Windows.h>
#include "DynamicCode.h"
#include "my_crt.h"
#include "my_mem.h"

Bool CFateHA::GenerateBody(UInt32 uLoop)
{
    if (--uLoop == 0)
    {
        return GenerateTail();
    }

    {
        Byte bytes[] = { 0x53 };
        if (AppendBytes(sizeof(bytes), bytes) == False)
            return False;
    }

    if (GenerateSeed() & 1)
    {
        if (GenerateBody(uLoop) == False)
            return False;
    }
    else if (GenerateBody2(uLoop) == False)
        return False;

    {
        Byte bytes[] = { 0x89, 0xC3 };
        if (AppendBytes(sizeof(bytes), bytes) == False)
            return False;
    }

    if (GenerateSeed() & 1)
    {
        if (GenerateBody(uLoop) == False)
            return False;
    }
    else if (GenerateBody2(uLoop) == False)
        return False;

    UInt32 mod = GenerateSeed() % 6;
    switch (mod)
    {
        case 5:
            {
                Byte bytes[] = { 0x29, 0xD8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 1:
        case 0:
            {
                Byte bytes[] = { 0x51 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x89, 0xD9 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x83, 0xE1, 0x0F };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0xD3, mod == 1 ? 0xE0 : 0xE8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x59 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 4:
            {
                Byte bytes[] = { 0x0F, 0xAF, 0xC3 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 3:
            {
                Byte bytes[] = { 0xF7, 0xD8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
        case 2:
            {
                Byte bytes[] = { 0x01, 0xD8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;
    }

    Byte bytes[] = { 0x5B };
    return AppendBytes(sizeof(bytes), bytes);
}

Bool CFateHA::GenerateBody2(UInt32 uLoop)
{
    if (--uLoop == 0)
        return GenerateTail();

    if (GenerateSeed() & 1)
    {
        if (GenerateBody(uLoop) == False)
            return False;
    }
    else if (GenerateBody2(uLoop) == False)
        return False;

    switch (GenerateSeed() & 7)
    {
        case 2:
            {
                Byte bytes[] = { 0xF7, 0xD8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 4:
            {
                Byte bytes[] = { 0xBE };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                UInt32 v = (UInt32)m_EncryptBlock;
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x25 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                UInt32 v = 0x3FF;
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x8B, 0x04, 0x86 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 3:
            {
                Byte bytes[] = { 0x40 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 0:
            {
                Byte bytes[] = { 0xF7, 0xD0 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 1:
            {
                Byte bytes[] = { 0x48 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 5:
            {
                Byte bytes[] = { 0x53 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x89, 0xC3 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x81, 0xE3, 0xAA, 0xAA, 0xAA, 0xAA };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x25, 0x55, 0x55, 0x55, 0x55 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0xD1, 0xEB };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0xD1, 0xE0 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x09, 0xD8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x5B };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 6:
            {
                Byte bytes[] = { 0x35 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;

                UInt32 v = GenerateSeed();
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            break;

        case 7:
            {
                Byte bytes[] = { (GenerateSeed() & 1) ? 0x05 : 0x2D };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;

                UInt32 v = GenerateSeed();
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            break;
    }

    return True;
}

Bool CFateHA::GenerateTail()
{
    UInt32 mod = GenerateSeed() % 3;

    switch (mod)
    {
        case 2:
            {
                Byte bytes[] = { 0xBE };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                UInt32 v = (UInt32)m_EncryptBlock;
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x8B, 0x86 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                UInt32 v = (GenerateSeed() & 0x3FF) << 2;
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            break;

        case 0:
            {
                Byte bytes[] = { 0xB8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                UInt32 v = GenerateSeed();
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            break;

        case 1:
            {
                Byte bytes[] = { 0x8B, 0xC7 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;
    }

    return True;
}

const UInt32 CFateHA::m_EncryptBlock[0x400] = 
{
    0x636E4520, 0x74707972, 0x206E6F69, 0x746E6F63, 0x206C6F72, 0x636F6C62, 0x2D2D206B, 0x61745320, 0x61636974, 0x20796C6C, 
    0x6420726F, 0x6D616E79, 0x6C616369, 0x202C796C, 0x65726964, 0x796C7463, 0x20726F20, 0x69646E69, 0x74636572, 0x202C796C, 
    0x6E697375, 0x68742067, 0x70207369, 0x72676F72, 0x61206D61, 0x6F2F646E, 0x6C622072, 0x206B636F, 0x6D6F7266, 0x68746F20, 
    0x70207265, 0x72676F72, 0x20736D61, 0x6C6C6977, 0x20656220, 0x656C6C69, 0x206C6167, 0x74207962, 0x6C206568, 0x6E656369, 
    0x61206573, 0x65657267, 0x746E656D, 0xB182202E, 0x7683CC82, 0x4F838D83, 0x80838983, 0x7583E282, 0x62838D83, 0xF0824E83, 
    0xC3904181, 0xC5824993, 0xEA82A082, 0x4993AE93, 0xA082C582, 0x4181EA82, 0xDA90BC92, 0xC5824993, 0xEA82A082, 0xDA90D48A, 
    0xC5824993, 0xEA82A082, 0xBC914181, 0x7683CC82, 0x4F838D83, 0x80838983, 0xE782A982, 0xA2827097, 0xB182E982, 0xCD82C682, 
    0x43838983, 0x93835A83, 0xC9825883, 0xE882E682, 0xB682D68B, 0xEA82E782, 0xA282C482, 0xB782DC82, 0x8E0A4281, 0x82EE91A9, 
    0x82418BC9, 0x96C682E9, 0x82AA8285, 0x82B182C9, 0x82B182C9, 0x8FC482B5, 0x827D8C6F, 0x82C482A6, 0x82EA82AD, 0x0A4281E9, 
    0xAC8F7581, 0xCC82B092, 0xD19475E0, 0xDF826C8B, 0x5C83F082, 0x5A835B81, 0x57835B81, 0x7697CC82, 0xC582CC97, 0xEA82E282, 
    0x6D20CE82, 0x79616C70, 0xAA827265, 0xB690C48D, 0xEA82B382, 0xE5914181, 0x9A8ECC82, 0xC882C982, 0xBD82C182, 0xD491F38F, 
    0xCC82C582, 0x578F4181, 0xC8826392, 0xA982F182, 0xC882CF95, 0xB682B48A, 0xDF8BC982, 0xF38FA282, 0xC582D491, 0x5B81CD82, 
    0x910A7681, 0x82CF958A, 0x82E782ED, 0x82BD89B8, 0x82BE8CF0, 0x82C482C1, 0x82CC82E9, 0x82ED82A9, 0x82E782A9, 0x82A282C8, 
    0x824181AA, 0x82D482BD, 0x826C96F1, 0x8CBD8AF0, 0x82B5827D, 0x82AD82C4, 0x82C482EA, 0x82E982A2, 0x82BE82CC, 0x81A482EB, 
    0x8FDE9442, 0x82CD8297, 0x82C982C8, 0x82E282E7, 0x82EA82A4, 0x82B082B5, 0x827581C9, 0x82E982DF, 0x82CD82CD, 0x82CD82DF, 
    0x81AF82EA, 0x82EA824B, 0x82EA82AF, 0x82EA82AF, 0x82CD82EA, 0x82CD82EA, 0x82EA82CD, 0x82EB82DF, 0x81EB82DF, 0x8CC68276, 
    0x82A282BE, 0x82AA82C8, 0x964181E7, 0x8ACC826C, 0x8FC68293, 0x828592E3, 0x82F38EF0, 0x82E68EAF, 0x81BD82C1, 0x940A0A42, 
    0x82978FDE, 0x82B182AA, 0x82C882A4, 0x82C482C1, 0x82DC82B5, 0x82BD82C1, 0x82CD82CC, 0x82B582BD, 0x83EA88A9, 0x918E8C96, 
    0x82BE824F, 0x82BD82C1, 0x82EB82BE, 0x81A982A4, 0x82859642, 0x97BF97CD, 0x8286929D, 0x82B182C9, 0x82C882F1, 0x82C682B1, 
    0x91FB8CF0, 0x82C18296, 0x0A4281BD, 0xAE8A7581, 0xC9825391, 0xDF82E297, 0xE782BD82, 0xBB8D4181, 0xF0829C93, 0x67353120, 
    0xA682C189, 0x4181C482, 0xAA95BC94, 0xE782AD82, 0xAC8DA282, 0xC182B482, 0xC682BD82, 0xEB82B182, 0x4181C582, 0xD19475E0, 
    0x93835483, 0x4181CD82, 0xA482E082, 0x4F8EF193, 0xC5826C90, 0x7681B782, 0x826C960A, 0x82A082CD, 0x82C482ED, 0x97BF97C4, 
    0x82F0829D, 0x82DF82E2, 0x81B982B3, 0x8FDE9441, 0x8BF08297, 0x82DC8278, 0x81BD82B9, 0x82859642, 0x8CBD89CD, 0x95A98ECC, 
    0x97AA82AA, 0x829D97BF, 0x82E282F0, 0x82B382DF, 0x82E782B9, 0x82BD82EA, 0x97A982CC, 0x82F0899D, 0x82AB82C5, 0x82A282C8, 
    0x82A482E6, 0x8F5C95C8, 0x82BE82EE, 0x82BD82C1, 0x824181AA, 0x88EA82BB, 0x818897C8, 0x8FDE9441, 0x8CCC8297, 0x827497BE, 
    0x899D97CD, 0x947395F0, 0x82C9825C, 0x82C182C8, 0x0A4281BD, 0x8FDE940A, 0x8CCD8297, 0x82C182BE, 0x82A282C4, 0x82B182E9, 
    0x88AA82C6, 0x95A196D3, 0x82BE9673, 0x82BE82C8, 0x81C582AF, 0x8D768E41, 0x91A98E6C, 0x82CD82CC, 0x82C682DC, 0x82C882E0, 
    0x82A482E6, 0x82CC82C8, 0x8D4181C5, 0x82DF8BC5, 0x82A082CD, 0x96E882DC, 0x8BE0826C, 0x82C98243, 0x82C482B5, 0x82C882A2, 
    0x824281A2, 0x82C682E0, 0x88C682E0, 0x82A895C0, 0x82A982BE, 0x824181E7, 0x82A282C6, 0x82CC82A4, 0x82A082E0, 0x824281E9, 
    0x82C182C6, 0x8EC982AD, 0x82BD96F5, 0x82DF89CD, 0x82C482AC, 0x82E982A2, 0x82AF82ED, 0x81B582BE, 0x97BF9741, 0x96EA909D, 
    0x83CC82E5, 0x83938341, 0x838D8368, 0x82688343, 0x8EC689C9, 0x94539196, 0x82F082CA, 0x82E782E2, 0x82C482B9, 0x82E982A2, 
    0x82BE82F1, 0x89E782A9, 0x898995DF, 0x82AA82D7, 0x82A982A9, 0x82C482C1, 0x82CC82E9, 0x82AA95CD, 0x82C182A9, 0x82A282C4, 
    0x0A4281E9, 0x82C6820A, 0x82BE8CCD, 0x82C482C1, 0x816381E0, 0x81638163, 0x97BF9742, 0x8286929D, 0x827581C9, 0x8EE082C5, 
    0x83E082E8, 0x836F836C, 0x816F836C, 0x82C28260, 0x82C582A2, 0x82438EC9, 0x83BD82C1, 0x8355834D, 0x8355834D, 0x83898374, 
    0x83708343, 0x83E08293, 0x836F836C, 0x816F836C, 0x82C28260, 0x82C582A2, 0x82438EC9, 0x83BD82C1, 0x8355834D, 0x8355834D, 
    0x83898374, 0x83708343, 0x83E08293, 0x836F836C, 0x816F836C, 0x82C28260, 0x82C582A2, 0x82438EC9, 0x83BD82C1, 0x8355834D, 
    0x8355834D, 0x83898374, 0x83708343, 0x83E08293, 0x836F836C, 0x816F836C, 0x82C28260, 0x82C582A2, 0x82438EC9, 0x83BD82C1, 
    0x8355834D, 0x8355834D, 0x83898374, 0x83708343, 0x83E08293, 0x836F836C, 0x816F836C, 0x82C28260, 0x82C582A2, 0x82438EC9, 
    0x83BD82C1, 0x8355834D, 0x8355834D, 0x83898374, 0x83708343, 0x83E08293, 0x836F836C, 0x816F836C, 0x82C28260, 0x82C582A2, 
    0x82438EC9, 0x83BD82C1, 0x8355834D, 0x8355834D, 0x83898374, 0x83708343, 0x83E08293, 0x836F836C, 0x816F836C, 0x82C28260, 
    0x82C582A2, 0x82438EC9, 0x83BD82C1, 0x8355834D, 0x8355834D, 0x83898374, 0x83708343, 0x83E08293, 0x836F836C, 0x816F836C, 
    0x82C28260, 0x82C582A2, 0x82438EC9, 0x83BD82C1, 0x8355834D, 0x8355834D, 0x83898374, 0x83708343, 0x83E08293, 0x836F836C, 
    0x816F836C, 0x82768160, 0x95A982C6, 0x8DCC8940, 0x82B682AC, 0x89C582E8, 0x82ED82CC, 0x82E982EA, 0x824181C6, 0x82C182A2, 
    0x89A282BD, 0x90F082BD, 0x82ED8248, 0x82EA82B3, 0x82CC82E9, 0x8FF194A9, 0x95C982ED, 0x82C08873, 0x82C882C9, 0x0A4281E9, 
    0x3352DAE3, 0xFE7FBBC8, 0x530726E2, 0x0B0B6A5C, 0x3F8E7C1B, 0x9E83EBA6, 0xD862D16B, 0x96833C47, 0x90FAAB82, 0x68DD887D, 
    0x1ADB742E, 0x4A144233, 0x7D5E3489, 0x9B97858B, 0x31CA3E74, 0x176FA1AF, 0x50002D31, 0xC9ED50B3, 0x0B43F032, 0x9B7A9000, 
    0x152AF338, 0xAF99126E, 0x84F0F530, 0xEF343F2B, 0x56A73903, 0x1B8F8FF7, 0x2CED9C95, 0x2BF3CC9E, 0x50F92BD2, 0xC097F72D, 
    0x3186941B, 0x748F6BA9, 0x051A6DB7, 0x49222467, 0x480A9796, 0xEB497242, 0xA1A42653, 0x23732EBC, 0xBE7B9171, 0x40795CDE, 
    0xE747A84C, 0xB24C747A, 0xAC5F7C33, 0xAECC949E, 0x79DDBC1E, 0x1FB8041E, 0x322B7286, 0x51C54C41, 0x9ADB2244, 0x19B76625, 
    0xFC983D82, 0x205C46BC, 0x0F631E1B, 0xE4F0DC32, 0xDA009501, 0x7D15F9DA, 0x3FEE2109, 0xE89FF4B7, 0x2C22F16C, 0xAB7220BA, 
    0xB011BF20, 0xC3D99AD1, 0x166C690D, 0x5822B78D, 0x4B591355, 0x59256FDD, 0x092EF22C, 0xD1079E79, 0xB93FD41C, 0x62482730, 
    0x0BEF33A6, 0x0E3AAAB9, 0x38363BE9, 0xAD823B1E, 0xDFD45E15, 0xA629216C, 0xD15D3A9F, 0xEC738395, 0xE074C963, 0x0E2C0E17, 
    0x11898CD7, 0x676BBF01, 0x913C273A, 0x547C0EAE, 0x1BEEEF52, 0xCC277D8A, 0x6127D997, 0x19DC72C1, 0x0B164FC9, 0x2030E5E3, 
    0xA6955244, 0x48A44E6D, 0x64C8389D, 0x8732FCDD, 0x3F27532E, 0x589278A8, 0x58E5F2A8, 0x01B3AF33, 0x27D0BB30, 0x715DDC19, 
    0x8C1719FD, 0xB0F8B8EF, 0xF068EA36, 0xB4AEC7BE, 0x7364A6F5, 0x4DD7EE25, 0xE434CE7F, 0x14450AE7, 0x754A7044, 0xF3710048, 
    0xE9012754, 0x9D0C09CA, 0x6993DED3, 0xD5165B33, 0xBD5B4E84, 0x1A903B52, 0x58235AC9, 0x3D17A681, 0xF85FA46C, 0xD654CCA9, 
    0xDB79B57C, 0x840043E7, 0x2A7042AA, 0xD1722963, 0x3EBABBB3, 0xCE7BFF79, 0x3D32D4AA, 0xF42C3478, 0xFE2B1999, 0x03F26373, 
    0xB508739B, 0xFB6720CF, 0x09691891, 0x4E0EC252, 0xAE7DB8FC, 0x6351259B, 0x1CDA78DA, 0x03A60F99, 0x7C797F1A, 0xC96D70DA, 
    0xE95E1F77, 0xA75B41C0, 0xC1E9ABE5, 0x62635E88, 0x9234DBD4, 0x87927F64, 0x328C978A, 0x5515EF8D, 0x689FBEE7, 0xC5EB0A20, 
    0x02F1488A, 0x039759DB, 0x017F476E, 0xE885EF1E, 0x4DDE43E5, 0xDD5784B6, 0x91F0274C, 0x6B8E055F, 0x2387EEA9, 0x2E26AA44, 
    0x0F941BE2, 0x51A09E27, 0xC5B21C66, 0x713EEC34, 0x32ECE375, 0xAE97DA30, 0x58DBD23E, 0x4D8CC936, 0x8420D782, 0xC1492F35, 
    0xEC9E1091, 0x26D6778E, 0x2FD38A71, 0xF9EDC589, 0x19083BDD, 0x8E182F68, 0x3FA44361, 0x0DB8DCFE, 0xE27B5227, 0xD5444BDD, 
    0xFF390E68, 0x395D6B72, 0xF139466C, 0xB6405B23, 0x9FE5E4A6, 0x5CFD1C90, 0x1EF856D0, 0x6BBD1FFE, 0xAE72F052, 0x9F45704C, 
    0x821FA2D6, 0x99FDDF59, 0xDCFA1ACD, 0x2BE6C359, 0x6996371D, 0x667BB192, 0x5ADC092F, 0xC2897D77, 0x007B5559, 0x2449A28B, 
    0x2DD35457, 0x791AE3A0, 0x631C345C, 0x5FCE41CE, 0x3814737E, 0x8CD1D1AB, 0xE428F5C9, 0x54461F83, 0xE09FD915, 0x0A93A12B, 
    0xAEA2CFA2, 0x2D97718A, 0x0D8D0C16, 0xA9967B80, 0x28806F3B, 0x3E9AA34A, 0x67E300F1, 0x35DE8D16, 0x7F197EC8, 0xFB3D7FE7, 
    0xE85E09E1, 0xACFA2367, 0xEDF4735B, 0x3769927E, 0xB7477796, 0x661CB493, 0x327EC8B9, 0x5D3A6202, 0x5372308B, 0xFC2141CF, 
    0x6A8775F6, 0x1A03D396, 0x894A30C2, 0x9E73A916, 0x256D2007, 0x269E6E62, 0xB7F91C57, 0xF12F6400, 0x5312BEF1, 0x97874F06, 
    0xAA2D5F8C, 0xA01C1556, 0x797BF458, 0xAEF90591, 0x46F47BAA, 0xB8F29CD4, 0x37C02770, 0x2F5B059A, 0x7CB38DD8, 0x82E5F29E, 
    0x65598B92, 0x24F2625A, 0x8F3BD27F, 0x66887F6A, 0xF5816461, 0xB9E64831, 0xF466D6A4, 0x436ED2E0, 0xB3C68233, 0x0694812F, 
    0xEF696892, 0x4E568723, 0xC499B570, 0xE124FE3E, 0x9AA32EAF, 0x21AE9520, 0xC25AF28C, 0x2BFE7016, 0x1C6C46B6, 0x4A4391F4, 
    0xA8A13561, 0xA675E109, 0x0DE997CC, 0xDFDDB6A6, 0xB50060F2, 0xBB51D8D8, 0xCB09CD8F, 0x0949FF2A, 0x01424098, 0x59D0C1DC, 
    0x2F106BA5, 0x978A2FFF, 0xB0E3628B, 0xB3C49D02, 0xF8936EC9, 0x8C48E791, 0xAD407594, 0x212BBF58, 0x622F18E3, 0xB3957FC9, 
    0xFE378317, 0x95A37F33, 0x007A7310, 0x29B4301B, 0xD2DB4890, 0x2C93942E, 0x63B35E86, 0x73253B49, 0xFFC00E15, 0x223A4CB3, 
    0xEA29B4E5, 0x0A05EBE0, 0xA7ED40E0, 0x642AF8A6, 0x3DDF4373, 0x6CB1490A, 0x932AF719, 0x379D2BDB, 0x3CA462AF, 0xAC75E7AA, 
    0x78E2BCAB, 0xD092AA5C, 0x52340EE0, 0x0458A593, 0xF262D40E, 0xBEB08247, 0xC1833EA8, 0x6245BB05, 0x262AA91B, 0x8384FE6E, 
    0x560EDF0B, 0xA93D1E58, 0x2599FFAD, 0x3A81CED8, 0x89E0E20C, 0x0146D0A4, 0xA646CC2F, 0xABCE1850, 0xD599E4B2, 0x88B2994C, 
    0x8BE795CB, 0x3D1D7204, 0x2668A71F, 0xA2B172CE, 0xFF53FEFB, 0x84BFB588, 0x5A462419, 0xB7A2FE27, 0x87250A79, 0x72145014, 
    0xCF312DF3, 0xF5D2860D, 0x7F696A53, 0xE33CE2E3, 0x8659B857, 0x9E5B3645, 0xBEEFE2E2, 0x451F5155, 0xA0126685, 0xB9772EFF, 
    0x733901A3, 0x5F3DC23E, 0x20EC0C69, 0xE6BD1197, 0x6ACA7801, 0x76C8F268, 0x7A545AA2, 0x47846796, 0xD2077679, 0x913E7D1D, 
    0xF1DCD29D, 0x52AFC4D1, 0xA9C93A58, 0x2C5E8351, 0xBD95639B, 0x8571EB48, 0xA5EB5279, 0x69503BC9, 0x05597EC8, 0xE4A9066A, 
    0xC0896A3B, 0x4EB26A6D, 0x239B7046, 0xF4380DE0, 0x75D1B089, 0xA9E63C0A, 0x7FB85BC2, 0xF389126F, 0xF3B40F13, 0x4A2A0E95, 
    0x35FBC6FD, 0xD4E903BB, 0x25680154, 0x680C1292, 0x93234335, 0xBDC03990, 0xFE91F10C, 0x5F12DCFB, 0x55106A6D, 0x6CF807CB, 
    0x193547C8, 0x104AE412, 0x8A8669B1, 0xC1F64E12, 0x9D612FE7, 0x23C8A3E6, 0xE589A8A7, 0x55ECD558, 0xC8105D68, 0x6275AB02, 
    0x74D2921B, 0x0250A7FC, 0xB3807B08, 0xB0AE1ADF, 0xDA386E12, 0x4B51C0AA, 0xCF14DE59, 0xEFDE787D, 0x5E0CD759, 0xD99FFF9B, 
    0x07DDDCEA, 0x5F6C7932, 0xD3C65097, 0x74F6EC61, 0xCF31A959, 0x9EEDABB3, 0x009D1559, 0x7082F94D, 0x24B7EA47, 0xF4797CBF, 
    0xEDCE25F4, 0x642E142E, 0xAB7BF3E4, 0xDB71BD16, 0x2432ECD8, 0xC861B699, 0x16A795A2, 0x04F6F48D, 0x0DAD39FB, 0x2260F508, 
    0xDD5A038E, 0xD24927DE, 0x143B222B, 0xB572DE16, 0x41068E3D, 0x668684B5, 0x2826E740, 0x1FD8D077, 0x6F7B773D, 0x19596855, 
    0xF60EA06A, 0xDE152DA1, 0xDA80CCC1, 0x88CDE614, 0x4B1178EF, 0xEC774A2B, 0x820DFCDC, 0x951A931C, 0x3A4593BF, 0x71ABB2D9, 
    0x6D9A673E, 0xE997574B, 0x94982E03, 0xEE1D1FE7, 0x4C0319A9, 0x22190DD5, 0xADB96BFB, 0xDAC911A3, 0xD7971E00, 0xA0B3168E, 
    0xB83B5750, 0x10444930, 0x1326E4F8, 0x6D655277, 0x1CAFEF02, 0x2099F1F5, 0xCB93F520, 0xD3F1F96A, 0x2EBD513B, 0xFFF8EDD0, 
    0x34E24ADE, 0x0A24305C, 0xE679287B, 0x59A6FE6E, 0x7FFB2FF4, 0xC34A2767, 0xEF649DED, 0x7D46FFD6, 0x51F6FC87, 0xD05C89B6, 
    0x13F36121, 0xB115783D, 0xED81E869, 0xEE38AC6A, 0x9C0997A4, 0x5F5229E3, 0x0CE76CBF, 0x99ACC5B6, 0x2AB78B85, 0x680A7056, 
    0x23AA7E10, 0x58372CB5, 0x6A6F14F2, 0x11D5973E, 0xDE0C64ED, 0xE2654DE5, 0xFAB63D3B, 0x53BD9140, 0xC4A1120E, 0x5CEC3965, 
    0x8D17096C, 0xBE88DCC0, 0x9392BE35, 0x1258A1DC, 0x6338D0D9, 0x084CD4DB, 0x86E5EACA, 0x264CFB94, 0x12C7E57C, 0x693DED09, 
    0xCD672B03, 0x4DFF92FC, 0xDC925F4B, 0xF2EA4A03, 0x3436F143, 0x359200E6, 0xD72BEF21, 0xF8D6447A, 0x7E516F04, 0x70A707B6, 
    0x6C035C92, 0xE4FC556E, 0xAADB5549, 0xE04CD9FD, 0x1233949A, 0x15BADE09, 0x7067227B, 0x17B03BD4, 0xE30CCDEF, 0x70EAEEE4, 
    0x5DAC87AF, 0x50AD9822, 0x788E83BE, 0xEEE54E50, 0xEE05A1CE, 0xC60F7C1F, 0x0F220A8C, 0xADC291F1, 0x03E94E1F, 0x7FEC68C6, 
    0x85D7AEB8, 0x033676FF, 0x095A8BFB, 0xA33B6D37, 0xE78DB174, 0x08663C35, 0x541434D7, 0x72724457, 0xC8375C82, 0xAB21D486, 
    0x653B543D, 0x5BF3C44F, 0xF63A21A8, 0x407BD2F4, 0x30238655, 0x6ABD3E4C, 0xB35EE8B2, 0x909EE31C, 0x894F84E8, 0xDA43BD2D, 
    0x46EB6028, 0x6AF94D87, 0x0A5DB62F, 0x91B1389C, 0x60BE029B, 0x6167A40B, 0xA48477A3, 0xF4E4956F, 0xBBA34ADF, 0x1D00668A, 
    0xD6B3DC4E, 0xE5442DE5, 0x1B9E1C27, 0x8D8BFDF2, 0x96481D18, 0xD10C9EB2, 0x88BC3688, 0x34302FDD, 0x613551EC, 0xA4F068EA, 
    0x5F686E14, 0xEAC03972, 0xF14FBB46, 0x8A7700E9
};