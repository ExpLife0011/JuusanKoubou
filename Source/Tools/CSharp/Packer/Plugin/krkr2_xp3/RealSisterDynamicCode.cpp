#include <Windows.h>
#include "DynamicCode.h"
#include "my_crt.h"
#include "my_mem.h"

Bool CRealSister::GenerateBody(UInt32 uLoop)
{
    if (--uLoop == 0)
    {
        return GenerateTail();
    }

    {
        Byte bytes[] = { 0x53 };
        if (AppendBytes(sizeof(bytes), bytes) == False)
            return False;
    }

    if (GenerateSeed() & 1)
    {
        if (GenerateBody(uLoop) == False)
            return False;
    }
    else if (GenerateBody2(uLoop) == False)
        return False;

    {
        Byte bytes[] = { 0x89, 0xC3 };
        if (AppendBytes(sizeof(bytes), bytes) == False)
            return False;
    }

    if (GenerateSeed() & 1)
    {
        if (GenerateBody(uLoop) == False)
            return False;
    }
    else if (GenerateBody2(uLoop) == False)
        return False;

    UInt32 mod = GenerateSeed() % 6;
    switch (mod)
    {
        case 0:
            {
                Byte bytes[] = { 0x29, 0xD8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 1:
        case 2:
            {
                Byte bytes[] = { 0x51 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x89, 0xD9 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x83, 0xE1, 0x0F };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0xD3, mod == 2 ? 0xE0 : 0xE8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x59 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 3:
            {
                Byte bytes[] = { 0x0F, 0xAF, 0xC3 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 4:
            {
                Byte bytes[] = { 0xF7, 0xD8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
        case 5:
            {
                Byte bytes[] = { 0x01, 0xD8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;
    }

    Byte bytes[] = { 0x5B };
    return AppendBytes(sizeof(bytes), bytes);
}

Bool CRealSister::GenerateBody2(UInt32 uLoop)
{
    if (--uLoop == 0)
        return GenerateTail();

    if (GenerateSeed() & 1)
    {
        if (GenerateBody(uLoop) == False)
            return False;
    }
    else if (GenerateBody2(uLoop) == False)
        return False;

    switch (GenerateSeed() & 7)
    {
        case 0:
            {
                Byte bytes[] = { 0xF7, 0xD8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 1:
            {
                Byte bytes[] = { 0xBE };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                UInt32 v = (UInt32)m_EncryptBlock;
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x25 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                UInt32 v = 0x3FF;
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x8B, 0x04, 0x86 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 2:
            {
                Byte bytes[] = { 0x40 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 3:
            {
                Byte bytes[] = { 0xF7, 0xD0 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 4:
            {
                Byte bytes[] = { 0x48 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 5:
            {
                Byte bytes[] = { 0x53 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x89, 0xC3 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x81, 0xE3, 0xAA, 0xAA, 0xAA, 0xAA };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x25, 0x55, 0x55, 0x55, 0x55 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0xD1, 0xEB };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0xD1, 0xE0 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x09, 0xD8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x5B };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;

        case 6:
            {
                Byte bytes[] = { 0x35 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;

                UInt32 v = GenerateSeed();
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            break;

        case 7:
            {
                Byte bytes[] = { (GenerateSeed() & 1) ? 0x05 : 0x2D };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;

                UInt32 v = GenerateSeed();
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            break;
    }

    return True;
}

Bool CRealSister::GenerateTail()
{
    UInt32 mod = GenerateSeed() % 3;

    switch (mod)
    {
        case 0:
            {
                Byte bytes[] = { 0xBE };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                UInt32 v = (UInt32)m_EncryptBlock;
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            {
                Byte bytes[] = { 0x8B, 0x86 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                UInt32 v = (GenerateSeed() & 0x3FF) << 2;
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            break;

        case 1:
            {
                Byte bytes[] = { 0xB8 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            {
                UInt32 v = GenerateSeed();
                if (AppendBytes(sizeof(v), &v) == False)
                    return False;
            }
            break;

        case 2:
            {
                Byte bytes[] = { 0x8B, 0xC7 };
                if (AppendBytes(sizeof(bytes), bytes) == False)
                    return False;
            }
            break;
    }

    return True;
}

const UInt32 CRealSister::m_EncryptBlock[0x400] =
{
    0x636E4520, 0x74707972, 0x206E6F69, 0x746E6F63, 0x206C6F72, 0x636F6C62, 0x2D2D206B, 0x61745320, 0x61636974, 0x20796C6C,
    0x6420726F, 0x6D616E79, 0x6C616369, 0x202C796C, 0x65726964, 0x796C7463, 0x20726F20, 0x69646E69, 0x74636572, 0x202C796C,
    0x6E697375, 0x68742067, 0x70207369, 0x72676F72, 0x61206D61, 0x6F2F646E, 0x6C622072, 0x206B636F, 0x6D6F7266, 0x68746F20,
    0x70207265, 0x72676F72, 0x20736D61, 0x6C6C6977, 0x20656220, 0x656C6C69, 0x206C6167, 0x74207962, 0x6C206568, 0x6E656369,
    0x61206573, 0x65657267, 0x746E656D, 0xB182202E, 0x7683CC82, 0x4F838D83, 0x80838983, 0x7583E282, 0x62838D83, 0xF0824E83,
    0xC3904181, 0xC5824993, 0xEA82A082, 0x4993AE93, 0xA082C582, 0x4181EA82, 0xDA90BC92, 0xC5824993, 0xEA82A082, 0xDA90D48A,
    0xC5824993, 0xEA82A082, 0xBC914181, 0x7683CC82, 0x4F838D83, 0x80838983, 0xE782A982, 0xA2827097, 0xB182E982, 0xCD82C682,
    0x43838983, 0x93835A83, 0xC9825883, 0xE882E682, 0xB682D68B, 0xEA82E782, 0xA282C482, 0xB782DC82, 0x430A4281, 0x7279706F,
    0x74686769, 0x29432820, 0x31303220, 0x4C412030, 0x20746F63, 0x656E6F48, 0x6F432079, 0x4120626D, 0x52206C6C, 0x74686769,
    0x65522073, 0x76726573, 0x0A2E6465, 0x82A2900A, 0x828692CC, 0x81CD82C9, 0x8E518241, 0x82DE97ED, 0x8CA882CC, 0x82BF825A,
    0x82F182E1, 0x82A282AA, 0x82C682E9, 0x81A482A2, 0x8C0A0A42, 0x82C08EBB, 0x828596CC, 0x96E290C9, 0x81B5825D, 0x81518341,
    0x8280835B, 0x96E082C5, 0x82C98285, 0x824796CD, 0x82E782A6, 0x82C882EA, 0x82C882AD, 0x82BD82C1, 0x825A8CA8, 0x82E182BF,
    0x0A4281F1, 0x82BB820A, 0x8CC482B5, 0x82C08EBB, 0x828596CC, 0x96E290C9, 0x82B5825D, 0x82A982BD, 0x82B182E7, 0x834181BB,
    0x835B8151, 0x90CC8280, 0x82458AA2, 0x919D97C5, 0x96CC827A, 0x8BF08285, 0x82DF8281, 0x8CA882E9, 0x82BF825A, 0x81F182E1,
    0x820A0A42, 0x95CC82B1, 0x82EA8CA8, 0x824181CD, 0x82CC82BB, 0x82BF82A4, 0x8EE38CCC, 0x0A4281D2, 0xC08EBB8C, 0x8596CC82,
    0x7581C982, 0x82834C83, 0x76814383, 0x45837581, 0x43835583, 0xC6827681, 0xB082738B, 0xEA82E782, 0xFC944181, 0x978FAD8F,
    0x5B815183, 0xCC828083, 0xC9828596, 0x7A919D97, 0x818BF082, 0xBD82DF82, 0x820A4181, 0x82B182C7, 0x82C582C9, 0x82A282E0,
    0x96BD95E9, 0x82C8827D, 0x825A8CA8, 0x82E182BF, 0x81CC82F1, 0x828C8C41, 0x82BE8AC6, 0x82DC97C6, 0x82BB82C6, 0x82BC91CC,
    0x82EB82E0, 0x82EB82E0, 0x82608FCC, 0x82B38CF0, 0x82D492C9, 0x8BBD82C1, 0x825E984C, 0x82A082C5, 0x0A4281E9, 0x90E58E0A,
    0x81F68C6C, 0x90E59145, 0x82C197F2, 0x824181CD, 0x82EA82B1, 0x90C582DC, 0x82588194, 0x8FFC94CC, 0x83978FAD, 0x835B8151,
    0x96C58280, 0x88F08285, 0x82B582A4, 0x82AB82C4, 0x90B690BD, 0x82CC8288, 0x825A8CA8, 0x82E182BF, 0x0A4281F1, 0xF182BB82,
    0xDE94C882, 0x4181AA82, 0xA082C682, 0x5183E982, 0x80835B81, 0x8596CC82, 0x5390C982, 0x4492F082, 0xEA82ED82, 0x4281BD82,
    0xE5910A0A, 0xAB82448D, 0xBA90C882, 0x41814497, 0x448DE591, 0xC882AB82, 0xE689B48C, 0x4181C689, 0xB582BB82, 0xA882C482,
    0xBF825A8C, 0xF182E182, 0xBD82CC82, 0xC882DF82, 0xBF82E782, 0xC182E582, 0x4783C682, 0x60836283, 0xC882C982, 0xC482C182,
    0xDC82B582, 0x8596A482, 0x820A4281, 0x81AA82BE, 0x8EBB8C41, 0x836981C0, 0x8341838A, 0x826A818B, 0x828596CC, 0x82A082C5,
    0x82789EE9, 0x82BB82CD, 0x82B582A4, 0x815183BD, 0x8280835B, 0x924D94C9, 0x82B78286, 0x825A8CE9, 0x894181F0, 0x82A89598,
    0x82B588F0, 0x82E682A4, 0x96C882A4, 0x8CC582DA, 0x81E982A9, 0x830A0A42, 0x835B8151, 0x96CC8280, 0x815C8185, 0x8883965C,
    0x82BF82DF, 0x82F182E1, 0x8C4181CD, 0x82F0825A, 0x82F182BB, 0x82DA96C8, 0x82A98CC5, 0x82E882BD, 0x82C882B5, 0x0A4281A2,
    0x8F8FEA88, 0xA882C982, 0x43989795, 0xFC93D682, 0xBD82C182, 0x4181E882, 0xF082E88E, 0xC882C282, 0xC582A282, 0x5A8D6F93,
    0xBD82B582, 0x4181E882, 0xD782B782, 0xAA82C482, 0xC08EBB8C, 0xCD82C682, 0xA482E188, 0x0A0A4281, 0xF182BB82, 0xA082C882,
    0xFA93E982, 0xE996CC82, 0xC1974181, 0x7395CD82, 0x638B768E, 0xB296C882, 0xA98CF082, 0x4281E982, 0x88C2890A, 0x90A282A4,
    0x81C582BA, 0x8CA88275, 0x82BF825A, 0x81F182E1, 0x8CC68276, 0x82D482C4, 0x8ECC82BB, 0x81CD8271, 0x82E69041, 0x82C782D9,
    0x83C582DC, 0x835B8151, 0x88C58280, 0x8DB582A4, 0x82C18287, 0x82A282C4, 0x919D97BD, 0x96CC827A, 0x96418185, 0x82DF8883,
    0x82A082C5, 0x81BD82C1, 0x820A0A42, 0x82B582BB, 0x928297C4, 0x824181A9, 0x82E782B3, 0x95E982C8, 0x8B768E73, 0x8FBB8C63,
    0x97AA82DB, 0x8FF082C1, 0x81A48250, 0x810A0A42, 0x8CA88275, 0x82BF825A, 0x81F182E1, 0x824E8B41, 0x81C482AB, 0x82CB8242,
    0x824181A6, 0x825A8CA8, 0x82E182BF, 0x0A7681F1, 0x82798C0A, 0x82CC91AD, 0x826897F0, 0x82D482B3, 0x81EA82E7, 0x648F0A41,
    0xD9E1A282, 0x4A8AF082, 0xC682AD82, 0xBB824181, 0xC982B182, 0x5C81CD82, 0x0A0A5C81, 0xA8827581, 0xE682CD82, 0x4181A482,
    0x5A8CA882, 0xE182BF82, 0xF481F182, 0x810A7681, 0x81DC8275, 0x88839641, 0x82BF82DF, 0x81F182E1, 0x81488149, 0x940A0A76,
    0x82E68F6E, 0x82C982E8, 0x82C182C8, 0x95A98EC4, 0x8BF082AA, 0x82B1824E, 0x82C482B5, 0x82BD82A2, 0x81CD82CC, 0x81518341,
    0x8280835B, 0x834C83CC, 0x82898383, 0x82C182BB, 0x82E882AD, 0x82978FCC, 0x82718ECC, 0x82A082C5, 0x81BD82C1, 0x38AE0A42,
    0xE0FE721D, 0x01E4D268, 0x53CB0572, 0x3869D3AC, 0x45EFF54E, 0xFA16A8BE, 0x83D4961B, 0xFF182E3D, 0xFDFA9CD4, 0x3CF4F775,
    0xAA8B48DD, 0xEE797679, 0x408BB421, 0x797B94F2, 0x0CBADA26, 0xDA776508, 0xD3D0101B, 0x2EF76AB3, 0x3D118505, 0xE9386F12,
    0x0D7E582B, 0x7195A2DB, 0xF4041774, 0xBC16750A, 0x44FD1E6F, 0x5BB86CD7, 0x53A07595, 0xE3C89A97, 0xC2A1D513, 0xBD2ED528,
    0x90730797, 0x733EF61D, 0xCA687B0C, 0xA49A43B9, 0x82625386, 0xA7E193D0, 0x7821A180, 0xF98F055C, 0x9D87FC05, 0xAC91EBF3,
    0xCF356F56, 0xE592C409, 0x48C102E8, 0x274BCD26, 0x1C7EF59D, 0x09D899BF, 0xA8C5D8B9, 0xED0318CE, 0x438F4703, 0xD4A96275,
    0x762DB89F, 0x6967DDC9, 0x000D917C, 0xE1AD955B, 0xC588D1AE, 0xBADD8247, 0xF9A7947F, 0x39FC8844, 0xE06B6E23, 0xB5252E28,
    0xCB78C792, 0x9D43F95E, 0x0B7EF678, 0x70EA183C, 0x1A6C6837, 0xEF6FBF3E, 0xAE11A170, 0xE9BDED8C, 0x25BACCD8, 0xEBF8DC4E,
    0x622713FA, 0x30BBD9C9, 0xA037ED7C, 0x29629E00, 0x200BE283, 0xB7E81C4D, 0x0CD6EC48, 0xBDAAEAAF, 0xCCDB4D30, 0x9874C9B5,
    0x1E032F88, 0x18E3124B, 0xB21AA641, 0x51B5929A, 0x130E75F6, 0xC9FDD19E, 0x89C21C96, 0x334D2F98, 0xE3CF5093, 0xC60DDDA6,
    0xFBD1F923, 0x44856865, 0x8E8CC974, 0xD8270508, 0x71DA3AAE, 0x5C13A80B, 0x5A5B72DD, 0xCF0283D7, 0x6597E693, 0x2A118BE3,
    0x674E5F29, 0x0BF4CBF4, 0x7EF6B6DC, 0x712572C3, 0xBD024E38, 0x13B75C7D, 0xA9294010, 0xE760BFA0, 0x5D93B126, 0x01448FE5,
    0xBFEC466C, 0x567924F0, 0xCD2B324A, 0x852697C7, 0x1BC82B7E, 0x6DD38937, 0x7F32CEB9, 0xB2BA10E8, 0x87531F2B, 0xC197149B,
    0x1C58EDCE, 0x70DBA4BD, 0xCFF57195, 0x584B416C, 0xF6415877, 0x28FBD11A, 0xBC2B7D69, 0xCE9A9E70, 0x544A63D2, 0x9D0847F6,
    0xECCAE020, 0xD33D18D7, 0x28AE7547, 0x00D5D940, 0x1947C00E, 0x6D64B161, 0x5EC88EFA, 0xAEE3695F, 0xF071C7F0, 0xD146FF3F,
    0x964A6028, 0xFEF642F2, 0x5D3ACC02, 0x0FD7549F, 0xBCBBB86C, 0x5664C9AB, 0xDC2B9F56, 0x8782BAC2, 0x90AB6868, 0x27528CC7,
    0x4A2F8531, 0x7D2E0CB5, 0x40758451, 0xDE99654C, 0x044A60BC, 0x6D55B523, 0x6CE72CEE, 0x36E07AF3, 0xF695FBEF, 0x91F2763C,
    0x1187D539, 0x63A3458E, 0x20B905DC, 0x8FB52D69, 0xD3ED28F1, 0x876C9126, 0xDEDC3BF0, 0xEC079026, 0x6E89E4C7, 0x0337304C,
    0xBE223306, 0x21ABA4DC, 0x847C913E, 0x1F443EE7, 0xCE99D7F0, 0xEF9FF276, 0x5364BD5F, 0x331F43B8, 0x6EB4DD5C, 0x6787216B,
    0xFFABFAA6, 0x82CB30E2, 0x9BC80AA9, 0x12C2AF85, 0xD50931BF, 0xFCB8BE16, 0x45733E19, 0x6A1AED5A, 0xDBE1427C, 0x3C0A5706,
    0x1A265C6F, 0xF0FEF7EF, 0xDD28E363, 0x79A4B980, 0xDBB893F6, 0xF85A251C, 0x020CE0AA, 0x590B8D06, 0xF6F59F66, 0xB823B994,
    0x555A1CDE, 0x1C0689A2, 0x9D2EACB3, 0x70228BFB, 0x2FDB60EC, 0x3D1E3CE8, 0x6FCAF449, 0x5F6227F6, 0xFDD8AB27, 0x5629DEFF,
    0xDC553F24, 0xD912B7E8, 0xB765CF93, 0x2D255348, 0x060FD5D6, 0x1A98DA40, 0xF9E3DBB9, 0x72EB37DB, 0x3C80976F, 0xCCC882E1,
    0xAD918143, 0xC4190595, 0x52337BCC, 0x331E7FDC, 0x40FC2611, 0x4CAC5A3E, 0xE6D880D1, 0xA6BF98C0, 0xBC8D1AB4, 0x2084D703,
    0x0CE6F7D1, 0x9CC7452C, 0x4EBB0143, 0x03226007, 0x07888DD9, 0x08BDFD1D, 0x62996625, 0xB286F607, 0x07BE2C71, 0xD865EED3,
    0x2449E935, 0x4A053525, 0x9F00A02C, 0xA66477D6, 0xEF093453, 0x8252E13C, 0x52A791B8, 0xAD702597, 0xC4E780E1, 0x2DA38B5E,
    0x139345F0, 0x5B559E9E, 0x4BC9D464, 0xD92F5AE3, 0x954C3237, 0x2646D567, 0x8596E916, 0x346FE50B, 0x9BEB0A50, 0x4575313A,
    0x9E023EE1, 0x952A787E, 0x4AF19E14, 0x62D6DE72, 0xA55F4BB7, 0xC25C9E59, 0x7671FD5C, 0xB23FC344, 0xA668BD58, 0xE9D0A754,
    0x71E9F848, 0xD65672AB, 0x3269F52A, 0xCA24523A, 0x62275839, 0x9891281C, 0xF57D5F07, 0x8BD49580, 0x8CA1F862, 0x77FC6BAB,
    0xC046875A, 0x53947261, 0x25D0D24C, 0x93EE3C61, 0xA06A3582, 0x04817562, 0x7014DAF3, 0x12D7755F, 0x67C86494, 0x3C8E12D9,
    0xD683A7D3, 0x3D0E1CDA, 0x913EE785, 0xF44E8C1B, 0x5AD66C10, 0x8444FEE6, 0x1246F63D, 0xE3869DBE, 0xF4BD3B1B, 0x8858B873,
    0x9579FF89, 0x0BCC8873, 0x583C1363, 0x41FA4B33, 0x106AB8F9, 0xFD073E81, 0xCE3DC24B, 0xFA5BA8D8, 0x000E9BA0, 0x52AFA755,
    0xFC9F84E8, 0x9230C4E0, 0x07B30A45, 0x522D27A7, 0xBA47B6C7, 0x5C8A567B, 0x9558DE70, 0x50AE2BF1, 0x5DAECEB3, 0x40E3A6C9,
    0x1DA5E3DE, 0xBDDB1C89, 0x5FF3948C, 0x3A6BEF24, 0xFE52AF5E, 0x65929CB9, 0xE5EA3D27, 0x6B71200B, 0x7F053996, 0x71F44645,
    0xFBAC6E2C, 0xB64AA7AA, 0x4BCE452B, 0x03CD54F5, 0x15A8F63F, 0xC662256D, 0x2AFE1AA4, 0x1F0114BB, 0x8E33B875, 0x15F23FBE,
    0xCBA10322, 0x615283FE, 0xAD1471C9, 0x17BB8D56, 0x35102544, 0xD123B4F0, 0x2D1AFDE3, 0x3008E6D0, 0x64624AED, 0xC6576906,
    0x05AAB725, 0xFCCB4673, 0x757DFFB3, 0xA3F73C0D, 0x40CBC9C0, 0xA5018997, 0xD141FEF2, 0x23A9624C, 0x976DEABB, 0x91F03EE3,
    0xD69C61C5, 0x74758680, 0x0431700C, 0xD528566C, 0x50FBABAC, 0x2B25C46B, 0xF221ACF2, 0xCB1F788B, 0xE857171E, 0xB9162DFA,
    0x4B7B944A, 0x331AE880, 0xA167E2FF, 0x417281BD, 0xE9F166C9, 0xB1125EF1, 0x512EF17A, 0x3C6534FF, 0xA83C0061, 0x0CCAE600,
    0xD99E30CD, 0x71329A60, 0xE15C5010, 0x0F029CC3, 0xF5E4D3E8, 0xC6165ED9, 0xC4DF839E, 0xA9B07FB8, 0x258B507F, 0x69B46647,
    0x18A0CDAF, 0x415251F0, 0x518DB78A, 0xF85E3494, 0x1B8D6A51, 0xAE0424ED, 0x6F004B93, 0x5B5712FA, 0x4998C05D, 0xCD76702D,
    0xB5279887, 0x5735A561, 0x3087AFCA, 0x9F141CBF, 0x3B136F57, 0x4D7D0B54, 0xBA288DE8, 0xFA6492D0, 0x76708709, 0xBB28AF16,
    0xD5D0CB75, 0xD6C400F0, 0x2C5A0E32, 0xDA2E95C2, 0x7E53C4A4, 0x91EBA409, 0x6A2A294E, 0xFFDADA4C, 0xC3BFB80A, 0x2F8AFD86,
    0x00440FDA, 0xDF06C68A, 0x92D8C1E4, 0x442AD3B4, 0x3BECF46A, 0x867FBC5F, 0x09131A5A, 0xDC6FA84B, 0x3191EE9E, 0x7FD379B2,
    0x45FEA992, 0x45152506, 0x2D200702, 0xB2E10401, 0xB5C96509, 0x2292D52D, 0xD256F5CE, 0x6FF85D84, 0xE8DD23EB, 0x8AA67359,
    0xBF870211, 0x89DCE177, 0xDEE5D54D, 0x8A264D6F, 0xC87B1B3D, 0x8BFE766F, 0x54E5EB42, 0x30E62596, 0xDBE33927, 0xBC141AD9,
    0x9B40A564, 0x6221AFD5, 0x7EBD5555, 0x717009B8, 0xB0D6CFBC, 0xE5893FB0, 0xCE3994A4, 0xA9AB8706, 0x5805260C, 0x09FC3DBB,
    0x61DECD52, 0xC01C32A4, 0xBFC6F312, 0x1DC14399, 0xD6755F80, 0x726BD49D, 0xE7338F98, 0x86D60D7E, 0xB2E24185, 0x02E62F90,
    0x01209F51, 0x0E0749AA, 0x35D77CB6, 0xE23403E3, 0x6C9FA9B0, 0x7263784F, 0x97625311, 0xC0C515D9, 0x8D209F1C, 0x84E7FCCF,
    0x965FCEC4, 0x54E45974, 0x1122C210, 0xA957AC87, 0x8989BCB0, 0xC6443932, 0x1C5AF199, 0x9E010F68, 0xF3A6CEBC, 0x69336E69,
    0x825539C6, 0x4F3D2D3E, 0x081AB31F, 0x0904F8F4, 0x81E329F0, 0xFF0A4267, 0x4B560985, 0x5359B0F7, 0x3E380778, 0x15A4BE51,
    0x94E9099E, 0x0EB66E3A, 0x4B13BDDF, 0x1F4AF0A8, 0xF32F0F9A, 0x6DA1501E, 0xABA1A29B, 0x882C7BF5, 0x025F6ECF, 0xA0A20F60,
    0xA2293B76, 0xD6CFF304, 0xD2B28348, 0xD200D17D, 0x33264B3D, 0x331E51ED, 0x0C29ABF0, 0x9BD5729C, 0x803831DE, 0x58A5BC5C,
    0x94B520F3, 0xD1EADD2C, 0x00F40FED, 0xF7C4C055, 0xF246BB77, 0x345C8434, 0xE514C20D, 0x55044EA4, 0x78762002, 0x5F98729E,
    0xE549263C, 0xCBAA638C, 0xB19E983B, 0x1F1C7043, 0x53A82713, 0x54338172, 0x12F2D45E, 0x15574F1A, 0x75FB9AD5, 0xB5F5CF31,
    0x7357E84C, 0x66CABCF7, 0x1F211901, 0x72FE8337, 0xCAAC7106, 0x8E88BBE5, 0xC9A0B7B1, 0x65D9340A, 0x211FA153, 0xA9F43D56,
    0x863269EC, 0x0E07C18F, 0x9BFAC04D, 0xECA2BD2F, 0x5EA4D060, 0x4DA25404, 0x26767DDE, 0x19771073, 0x952E4ACC, 0x18F0FFEE,
    0xC5888C19, 0x51ACB339, 0x8558C878, 0x0F2DC4CC, 0x5631097E, 0x3D0821EE, 0xE0D10433, 0x5CF2D86E, 0x9C54E7A4, 0x04C51D37,
    0x924F1B8D, 0xF41F6FD3, 0xD52BABC6, 0x9D5E36E1, 0x7E19E26D, 0xA1EAF4BA, 0x486133BE, 0xF5CE52F1, 0x2DA0449B, 0xED1A82E0,
    0x4F7E852E, 0x1AC3D452, 0x5788F4A5, 0x09B89783, 0x42F67A88, 0x922C6816, 0x1538D604, 0x68EAB0CC, 0xC02A1545, 0x24A7D6D7,
    0xED724C41, 0x450001FA, 0x9EBC493A, 0x50E74ED7, 0xC8D7C5AA, 0xDC703D46, 0xBA88A789, 0x42FEBB7D, 0x8001923E, 0x1D7A8CBB,
    0xAC36600F, 0xA6A044E8, 0x5DC19DF4, 0x408AD5C1, 0x12AC9E10, 0x4FFFD7DF, 0x68E65180, 0x2DF3A4F0, 0xD5229243, 0xE0F4CF92,
    0x3BFBE95F, 0x32F165F1, 0xB39672D2, 0x27F5C084, 0x1E8E2A6B, 0x93CB38B9, 0x545999AA, 0xAF5B48F2, 0x9EF34BB9, 0x752E1E2F,
    0xDA169B1C, 0x7E3E1170, 0x33D23F69, 0x43F5FDCA
};